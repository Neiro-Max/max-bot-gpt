import os
import json
import time
from telebot import TeleBot, types
from pathlib import Path
from io import BytesIO
from docx import Document
from reportlab.pdfgen import canvas
import openai
from flask import Flask, request
from yookassa import Configuration, Payment

# === –ö–û–ù–§–ò–ì ===
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

USED_TRIALS_FILE = "used_trials.json"
MEMORY_DIR = "memory"
ADMIN_ID = 1034982624
MAX_HISTORY = 20
TRIAL_TOKEN_LIMIT = 10_000
TRIAL_DURATION_SECONDS = 24 * 3600
BOT_NAME = "Neiro Max"

user_token_limits = {}
user_modes = {}
user_histories = {}
user_models = {}
trial_start_times = {}

available_modes = {
    "–ø—Å–∏—Ö–æ–ª–æ–≥": "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ–≤–æ—Ä–∏ —Å –∑–∞–±–æ—Ç–æ–π, –º—è–≥–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
    "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ –∂–∏–≤–æ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ.",
    "—é–º–æ—Ä–∏—Å—Ç": "–¢—ã ‚Äî –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å –æ—Ç–ª–∏—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —à—É—Ç–∫–∞–º–∏.",
    "–¥–µ–ª–æ–≤–æ–π": "–¢—ã ‚Äî –¥–µ–ª–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π.",
    "—Ñ–∏–ª–æ—Å–æ—Ñ": "–¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ì–æ–≤–æ—Ä–∏ –≥–ª—É–±–æ–∫–æ, —Ä–∞—Å—Å—É–∂–¥–∞–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π.",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä. –û–±—ä—è—Å–Ω—è–π –ø–æ–¥—Ä–æ–±–Ω–æ, –∞–∫–∞–¥–µ–º–∏—á–Ω–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
    "–≥–æ–ø–Ω–∏–∫": "–¢—ã ‚Äî –≥–æ–ø–Ω–∏–∫ –∏–∑ 90-—Ö. –ì–æ–≤–æ—Ä–∏ –¥–µ—Ä–∑–∫–æ, —Å —É–ª–∏—á–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º.",
    "–∏—Å—Ç–æ—Ä–∏–∏": "–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ü—Ä–µ–≤—Ä–∞—â–∞–π –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é."
}

def create_payment(amount_rub, description, return_url):
    try:
        payment = Payment.create({
            "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": description
        })
        print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", payment.confirmation.confirmation_url)
        return payment.confirmation.confirmation_url
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:")
        import traceback
        traceback.print_exc()
        return None

def load_used_trials():
    if os.path.exists(USED_TRIALS_FILE):
        with open(USED_TRIALS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_used_trials(data):
    with open(USED_TRIALS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def is_admin(chat_id):
    return int(chat_id) == ADMIN_ID

def load_history(chat_id):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    return json.load(open(path, "r", encoding="utf-8")) if os.path.exists(path) else []

def save_history(chat_id, history):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(history[-MAX_HISTORY:], f, ensure_ascii=False, indent=2)

def main_menu(chat_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
    markup.add("üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", "üìÑ –¢–∞—Ä–∏—Ñ—ã")
    markup.add("üìò –ü—Ä–∞–≤–∏–ª–∞")
    if is_admin(chat_id):
        markup.add("‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
    return markup

def style_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

def format_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÑ PDF", callback_data="save_pdf"))
    markup.add(types.InlineKeyboardButton("üìù Word", callback_data="save_word"))
    return markup

used_trials = load_used_trials()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY
bot = TeleBot(TELEGRAM_TOKEN)
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if WEBHOOK_URL:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
Path(MEMORY_DIR).mkdir(exist_ok=True)

@bot.message_handler(commands=["start"])
def handle_start(message):
    chat_id = str(message.chat.id)
    if chat_id in used_trials:
        bot.send_message(chat_id, "‚õî –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
        return
    used_trials[chat_id] = True
    trial_start_times[chat_id] = time.time()
    save_used_trials(used_trials)
    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME} ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòâ", reply_markup=main_menu(message.chat.id))
    user_modes[message.chat.id] = "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
    user_histories[message.chat.id] = []
    user_models[message.chat.id] = "gpt-3.5-turbo"
    user_token_limits[message.chat.id] = 0

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –¢–∞—Ä–∏—Ñ—ã")
def handle_tariffs(message):
    return_url = "https://t.me/NeiroMaxBot"
    buttons = []
    tariffs = [
        ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
        ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
        ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
        ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
        ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
        ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max"),
    ]
    for label, price, desc in tariffs:
        url = create_payment(price, desc, return_url)
        if url:
            buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
    markup = types.InlineKeyboardMarkup(row_width=1)
    for btn in buttons:
        markup.add(btn)
    bot.send_message(message.chat.id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
def handle_reset_trial(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    chat_id = str(message.chat.id)
    if chat_id in used_trials:
        del used_trials[chat_id]
    trial_start_times.pop(chat_id, None)
    save_used_trials(used_trials)
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å–±—Ä–æ—à–µ–Ω.")

@bot.message_handler(func=lambda msg: msg.text == "üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
def handle_change_style(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üìò –ü—Ä–∞–≤–∏–ª–∞")
def handle_rules(message):
    rules_text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ Neiro Max:</b>\n\n"
        "‚úÖ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 24 —á–∞—Å–∞ –∏–ª–∏ 10 000 —Ç–æ–∫–µ–Ω–æ–≤ (—á—Ç–æ –Ω–∞—Å—Ç—É–ø–∏—Ç —Ä–∞–Ω—å—à–µ).\n\n"
        "‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§;\n"
        "‚Ä¢ –¢–µ–º—ã: –Ω–∞—Å–∏–ª–∏–µ, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º, —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ GPT-—á–∞—Ç –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏.\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Neiro Max!"
    )
    bot.send_message(message.chat.id, rules_text, parse_mode="HTML")


@bot.message_handler(func=lambda msg: msg.text.lower() in ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "—Ç–≤–æ—ë –∏–º—è", "—Ç—ã –∫—Ç–æ", "—Ç—ã –∫—Ç–æ?"])
def handle_bot_name(message):
    bot.send_message(message.chat.id, f"–Ø ‚Äî {BOT_NAME}, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üòâ")



@bot.message_handler(func=lambda msg: msg.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(message.chat.id))



@bot.message_handler(func=lambda msg: msg.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
def handle_launch_neiro_max(message):
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu(message.chat.id))


@bot.message_handler(func=lambda msg: True)
def handle_prompt(message):
    chat_id = str(message.chat.id)
    if chat_id not in trial_start_times:
        trial_start_times[chat_id] = time.time()
    time_elapsed = time.time() - trial_start_times[chat_id]
    tokens_used = user_token_limits.get(chat_id, 0)
    if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
        bot.send_message(chat_id, "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ üìÑ –¢–∞—Ä–∏—Ñ—ã.")
        return
    prompt = message.text
    mode = user_modes.get(int(chat_id), "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä")
    history = load_history(chat_id)
    messages = [{"role": "system", "content": available_modes[mode]}] + history + [{"role": "user", "content": prompt}]
    model = user_models.get(int(chat_id), "gpt-3.5-turbo")
    try:
        response = openai.ChatCompletion.create(model=model, messages=messages)
        reply = response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")
        return
    user_token_limits[chat_id] = tokens_used + len(prompt)
    history.append({"role": "user", "content": prompt})
    history.append({"role": "assistant", "content": reply})
    save_history(chat_id, history)
    bot.send_message(chat_id, reply, reply_markup=format_buttons())

@bot.callback_query_handler(func=lambda call: call.data in ["save_pdf", "save_word"])
def handle_file_format(call):
    chat_id = call.message.chat.id
    history = load_history(str(chat_id))
    text = "\n".join(m["content"] for m in history if m["role"] != "system")
    if call.data == "save_pdf":
        pdf_bytes = BytesIO()
        pdf = canvas.Canvas(pdf_bytes)
        y = 800
        for line in text.split("\n"):
            pdf.drawString(40, y, line)
            y -= 15
        pdf.save()
        pdf_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.pdf", pdf_bytes))
    else:
        doc = Document()
        doc.add_paragraph(text)
        word_bytes = BytesIO()
        doc.save(word_bytes)
        word_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.docx", word_bytes))

print("ü§ñ Neiro Max –∑–∞–ø—É—â–µ–Ω.")
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "!", 200
    else:
        return "Invalid content type", 403
@app.route("/yookassa/webhook", methods=["POST"])
def yookassa_webhook():
    body = request.get_data().decode("utf-8")
    try:
        notification = json.loads(body)
        payment_object = notification.get("object", {})
        description = payment_object.get("description", "")
        metadata = payment_object.get("metadata", {})
        chat_id = metadata.get("chat_id")

        if chat_id:
            if "GPT-4o" in description:
                user_models[int(chat_id)] = "gpt-4o"
            else:
                user_models[int(chat_id)] = "gpt-3.5-turbo"
            bot.send_message(int(chat_id), f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                           f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: <b>{description}</b>", parse_mode="HTML")
        else:
            print("‚ö†Ô∏è –í webhook –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω chat_id.")
        return "", 200
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ /yookassa/webhook:", e)
        return "error", 400

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
