
import os
import json
import time
from pathlib import Path
from io import BytesIO

from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import pytesseract
from telebot import TeleBot, types
from docx import Document
from reportlab.pdfgen import canvas
import openai
from flask import Flask, request, jsonify
from yookassa import Configuration, Payment

# === –ö–û–ù–§–ò–ì ===
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY
def preprocess_image_for_ocr(image: Image.Image) -> Image.Image:
    # –ü–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    gray = image.convert('L')

    # –£—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    enhancer = ImageEnhance.Contrast(gray)
    gray = enhancer.enhance(2.0)

    # –ß–∏—Å—Ç–∏–º —à—É–º
    gray = gray.filter(ImageFilter.MedianFilter(size=3))

    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (—á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    bw = gray.point(lambda x: 0 if x < 140 else 255, '1')

    return bw


USED_TRIALS_FILE = "used_trials.json"
TRIAL_TIMES_FILE = "trial_times.json"
MEMORY_DIR = "memory"
ADMIN_ID = 1034982624
MAX_HISTORY = 20
TRIAL_TOKEN_LIMIT = 10_000
TRIAL_DURATION_SECONDS = 86400  # 24 —á–∞—Å–∞
BOT_NAME = "Neiro Max"

user_token_limits = {}
user_modes = {}
user_histories = {}
user_models = {}
trial_start_times = {}
# ‚úÖ –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–Ω–∏–∫–∞
def check_access_and_notify(chat_id):
    now = time.time()
    tokens_used = user_token_limits.get(chat_id, 0)

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ===
    is_trial = str(chat_id) not in user_models or user_models[str(chat_id)] == "gpt-3.5-turbo"
    trial_start = trial_start_times.get(str(chat_id))

    if is_trial and trial_start:
        time_elapsed = now - trial_start
        if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
            # –ñ–Å–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê
            bot.send_message(chat_id, "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
            return False

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ===
    subscription_file = "subscriptions.json"
    if os.path.exists(subscription_file):
        with open(subscription_file, "r", encoding="utf-8") as f:
            subscriptions = json.load(f)
    else:
        subscriptions = {}

    sub_data = subscriptions.get(str(chat_id))
    if sub_data:
        expires_at = sub_data.get("expires_at")
        warned = sub_data.get("warned", False)
        token_limit = sub_data.get("token_limit", 100000)

        # –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –±–ª–æ–∫
        if tokens_used >= token_limit:
            bot.send_message(chat_id, "‚õî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return False

        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫ ‚Äî –±–ª–æ–∫
        if expires_at and now > expires_at:
            bot.send_message(chat_id, "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ.")
            return False

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if expires_at and not warned and expires_at - now <= 86400:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
            subscriptions[str(chat_id)]["warned"] = True
            with open(subscription_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, indent=2)

    return True


available_modes = {
    "–ø—Å–∏—Ö–æ–ª–æ–≥": "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ–≤–æ—Ä–∏ —Å –∑–∞–±–æ—Ç–æ–π, –º—è–≥–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
    "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ –∂–∏–≤–æ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ.",
    "—é–º–æ—Ä–∏—Å—Ç": "–¢—ã ‚Äî –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å –æ—Ç–ª–∏—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —à—É—Ç–∫–∞–º–∏.",
    "–¥–µ–ª–æ–≤–æ–π": "–¢—ã ‚Äî –¥–µ–ª–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π.",
    "—Ñ–∏–ª–æ—Å–æ—Ñ": "–¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ì–æ–≤–æ—Ä–∏ –≥–ª—É–±–æ–∫–æ, —Ä–∞—Å—Å—É–∂–¥–∞–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π.",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä. –û–±—ä—è—Å–Ω—è–π –ø–æ–¥—Ä–æ–±–Ω–æ, –∞–∫–∞–¥–µ–º–∏—á–Ω–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
    "–≥–æ–ø–Ω–∏–∫": "–¢—ã ‚Äî –≥–æ–ø–Ω–∏–∫ –∏–∑ 90-—Ö. –ì–æ–≤–æ—Ä–∏ –¥–µ—Ä–∑–∫–æ, —Å —É–ª–∏—á–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º.",
    "–∏—Å—Ç–æ—Ä–∏–∏": "–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ü—Ä–µ–≤—Ä–∞—â–∞–π –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é."
}

def extract_chat_id_from_description(description):
    import re
    match = re.search(r'chat_id[:\s]*(\d+)', description)
    return int(match.group(1)) if match else None


def create_payment(amount_rub, description, return_url, chat_id):
    try:
        payment = Payment.create({
            "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": description,  # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            "metadata": {
                "chat_id": str(chat_id)
            }
        })
        print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", payment.confirmation.confirmation_url)
        return payment.confirmation.confirmation_url
        return payment.confirmation.confirmation_url
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:")
        import traceback
        traceback.print_exc()
        return None
def load_used_trials():
    if os.path.exists(USED_TRIALS_FILE):
        with open(USED_TRIALS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_trial_times(data):
    with open(TRIAL_TIMES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def load_token_usage():
    if os.path.exists("token_usage.json"):
        with open("token_usage.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_token_usage(data):
    with open("token_usage.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def save_used_trials(data):
    with open(USED_TRIALS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def is_admin(chat_id):
    return int(chat_id) == ADMIN_ID

def load_history(chat_id):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    return json.load(open(path, "r", encoding="utf-8")) if os.path.exists(path) else []

def save_history(chat_id, history):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(history[-MAX_HISTORY:], f, ensure_ascii=False, indent=2)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Business Pro –≤—Å–µ–≥–¥–∞ ===
def main_menu(chat_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
    markup.add("üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", "üìÑ –¢–∞—Ä–∏—Ñ—ã")
    markup.add("üìò –ü—Ä–∞–≤–∏–ª–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    markup.add("üìÇ Business Pro")  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ, –±–µ–∑ —É—Å–ª–æ–≤–∏–π
    if chat_id and int(chat_id) == ADMIN_ID:
        markup.add("‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
    return markup



def style_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

def format_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÑ PDF", callback_data="save_pdf"))
    markup.add(types.InlineKeyboardButton("üìù Word", callback_data="save_word"))
    return markup

used_trials = load_used_trials()
try:
    with open(TRIAL_TIMES_FILE, "r", encoding="utf-8") as f:
        trial_start_times = json.load(f)
        print("üéØ trial_start_times –∑–∞–≥—Ä—É–∂–µ–Ω:", trial_start_times)
except:
    trial_start_times = {}
    print("‚ö†Ô∏è trial_start_times –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    pass
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY
bot = TeleBot(TELEGRAM_TOKEN)
# === Business Pro: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é ===
# callback-–∫–ª—é—á–∏ (–ø—Ä–æ—Å—Ç—ã–µ, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏)
CB_BP_DOC   = "bp_doc"
CB_BP_OCR   = "bp_ocr"
CB_BP_EXCEL = "bp_excel"
CB_BP_GEN   = "bp_gen"

def send_bp_menu(chat_id: int):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data=CB_BP_DOC),
        types.InlineKeyboardButton("üñºÔ∏è OCR / —Ä–∞–∑–±–æ—Ä —Ñ–æ—Ç–æ", callback_data=CB_BP_OCR),
        types.InlineKeyboardButton("üìä Excel-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data=CB_BP_EXCEL),
        types.InlineKeyboardButton("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data=CB_BP_GEN),
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é Business Pro:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìÇ Business Pro")
def open_bp_menu(message):
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ ‚Äî —Å–∫–∞–∂–∏, –¥–æ–±–∞–≤–ª—é —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    send_bp_menu(message.chat.id)

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if WEBHOOK_URL:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
Path(MEMORY_DIR).mkdir(exist_ok=True)
@bot.message_handler(commands=["start"])
def handle_start(message):
    chat_id = str(message.chat.id)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    user_modes[message.chat.id] = "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
    user_histories[message.chat.id] = []

    if message.chat.id == ADMIN_ID:
        user_models[message.chat.id] = "gpt-4o"
    else:
        user_models[message.chat.id] = "gpt-3.5-turbo"

    user_token_limits[message.chat.id] = 0

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME} ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu(message.chat.id)
    )

from PIL import Image, ImageEnhance, ImageFilter
from pdf2image import convert_from_bytes
import pytesseract
from io import BytesIO

@bot.message_handler(content_types=['document', 'photo'])
def handle_ocr_file(message):
    try:
        file_id = message.document.file_id if message.content_type == 'document' else message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_bytes = BytesIO(downloaded_file)

        text = ''
        if message.content_type == 'document' and message.document.mime_type == 'application/pdf':
            images = convert_from_bytes(file_bytes.read(), dpi=300)
        else:
            img = Image.open(file_bytes)
            images = [img]

        for img in images:
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_img = preprocess_image_for_ocr(img)

            # OCR
            text += pytesseract.image_to_string(processed_img, lang='rus+eng') + '\n'

        text = text.strip()
        if not text:
            text = 'üßê –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF.'
            # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç OCR:\n", text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–∞–Ω–Ω–æ–µ –≤ Tesseract (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        try:
            if images:
                dbg_img = preprocess_image_for_ocr(images[0])
                dbg_img.save(f"/tmp/ocr_debug_{int(time.time())}.png")
        except Exception:
            pass

        bot.send_message(message.chat.id, f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text[:4000]}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n{e}")




@bot.message_handler(func=lambda msg: msg.text == "üìÑ –¢–∞—Ä–∏—Ñ—ã")
def handle_tariffs(message):
    return_url = "https://t.me/NeiroMaxBot"
    buttons = []
    tariffs = [
        ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
        ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
        ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
        ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
        ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
        ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max"),
        ("GPT-4o: Business Pro ‚Äì 2000‚ÇΩ", 2000, "GPT-4o Business Pro"),

    ]
    for label, price, desc in tariffs:
        full_desc = desc  # üîß –£–ë–†–ê–õ chat_id
        url = create_payment(price, full_desc, return_url, message.chat.id)
        if url:
            buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
    markup = types.InlineKeyboardMarkup(row_width=1)
    for btn in buttons:
        markup.add(btn)
    bot.send_message(message.chat.id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
def handle_reset_trial(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (–º–æ–∂–Ω–æ —Å–≤–æ–π):")
    bot.register_next_step_handler(message, reset_trial_by_id)

def reset_trial_by_id(message):
    target_id = message.text.strip()
    if not target_id.isdigit():
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å chat_id.")
        return
    if target_id in used_trials:
        del used_trials[target_id]
    trial_start_times.pop(target_id, None)
    save_used_trials(used_trials)
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å–±—Ä–æ—à–µ–Ω –¥–ª—è chat_id {target_id}.")

@bot.message_handler(func=lambda msg: msg.text == "üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
def handle_change_style(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üìò –ü—Ä–∞–≤–∏–ª–∞")
def handle_rules(message):
    rules_text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ Neiro Max:</b>\n\n"
        "‚úÖ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 24 —á–∞—Å–∞ –∏–ª–∏ 10 000 —Ç–æ–∫–µ–Ω–æ–≤ (—á—Ç–æ –Ω–∞—Å—Ç—É–ø–∏—Ç —Ä–∞–Ω—å—à–µ).\n\n"
        "‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§;\n"
        "‚Ä¢ –¢–µ–º—ã: –Ω–∞—Å–∏–ª–∏–µ, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º, —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ GPT-—á–∞—Ç –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏.\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Neiro Max!"
    )
    bot.send_message(message.chat.id, rules_text, parse_mode="HTML")


@bot.message_handler(func=lambda msg: any(phrase in msg.text.lower() for phrase in [
    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ—ë –∏–º—è", "—Ç—ã –∫—Ç–æ", "–∫–∞–∫ –∑–≤–∞—Ç—å", "–Ω–∞–∑—ã–≤–∞–µ—à—å—Å—è", "–Ω–∞–∑–æ–≤–∏ —Å–µ–±—è"
]))

def handle_bot_name(message):
    bot.send_message(message.chat.id, f"–Ø ‚Äî {BOT_NAME}, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üòâ")



@bot.message_handler(func=lambda msg: msg.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(message.chat.id))



@bot.message_handler(func=lambda msg: msg.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
def handle_launch_neiro_max(message):
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu(message.chat.id))
@bot.message_handler(func=lambda msg: msg.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def handle_support(message):
    bot.send_message(
        message.chat.id,
        "üõ† <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n\n"
        "Telegram: @neiro_max\n"
        "Email: support@neiro-max.ai",
        parse_mode="HTML"
    )




@bot.message_handler(func=lambda msg: msg.text.lower() in [m.lower() for m in available_modes])
def handle_style_selection(message):
    chat_id = str(message.chat.id)
    selected = message.text.lower()
    user_modes[chat_id] = selected
    bot.send_message(chat_id, f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{selected.capitalize()}</b>", parse_mode="HTML")
@bot.message_handler(func=lambda msg: msg.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
def handle_launch(message):
    chat_id = str(message.chat.id)

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    user_modes[message.chat.id] = "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
    user_histories[message.chat.id] = []
    user_models[message.chat.id] = "gpt-3.5-turbo"
    user_token_limits[message.chat.id] = 0

    bot.send_message(
        message.chat.id,
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòâ",
        reply_markup=main_menu(chat_id)
    )



@bot.message_handler(func=lambda msg: True)
def handle_prompt(message):
    chat_id = str(message.chat.id)

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–∞—Ä–∏—Ñ/–ø—Ä–æ–±–Ω–∏–∫)
    if not check_access_and_notify(chat_id):
        return

    # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç –ø—Ä–æ–±–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if chat_id not in trial_start_times:
        trial_start_times[chat_id] = time.time()




    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏
    tokens_used = user_token_limits.get(chat_id, 0)
    time_elapsed = time.time() - trial_start_times[chat_id]
    if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
    # ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–∏–∫–∞ + –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        return_url = "https://t.me/NeiroMaxBot"
        buttons = []
        tariffs = [
            ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
            ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
            ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
            ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
            ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
            ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max")
        ]
        for label, price, desc in tariffs:
            url = create_payment(price, desc, return_url, chat_id)
            if url:
                buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for btn in buttons:
            markup.add(btn)
        bot.send_message(
            chat_id,
            "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=markup
        )
        return
    prompt = message.text.strip()
    mode = user_modes.get(chat_id, "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä")
    model = user_models.get(chat_id, "gpt-3.5-turbo")

    # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∏–ª—é
    forbidden = {
        "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": ["–ø—Å–∏—Ö–æ–ª–æ–≥", "–¥–µ–ø—Ä–µ—Å—Å", "–ø–æ–¥–¥–µ—Ä–∂", "—Ç—Ä–µ–≤–æ–∂"],
        "–¥–µ–ª–æ–≤–æ–π": ["—é–º–æ—Ä", "—à—É—Ç–∫", "–ø—Ä–∏–∫–æ–ª"],
        "–≥–æ–ø–Ω–∏–∫": ["–∞–∫–∞–¥–µ–º", "–Ω–∞—É—á–Ω", "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä"],
        "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": ["—à—É—Ç–∫", "–≥–æ–ø–Ω–∏–∫", "–∂–∏–∑–∞"]
    }
    if any(word in prompt.lower() for word in forbidden.get(mode, [])):
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: <b>{mode.capitalize()}</b>.\n–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é.\n–°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üí°", parse_mode="HTML")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    history = load_history(chat_id)
    messages = [{"role": "system", "content": available_modes[mode]}] + history + [{"role": "user", "content": prompt}]

    try:
        response = openai.ChatCompletion.create(model=model, messages=messages)
        reply = response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏—é
    user_token_limits[chat_id] = tokens_used + len(prompt)
    history.append({"role": "user", "content": prompt})
    history.append({"role": "assistant", "content": reply})
    save_history(chat_id, history)

    bot.send_message(chat_id, reply, reply_markup=format_buttons())

@bot.callback_query_handler(func=lambda call: call.data in ["save_pdf", "save_word"])
def handle_file_format(call):
    chat_id = call.message.chat.id
    history = load_history(str(chat_id))
    text = "\n".join(m["content"] for m in history if m["role"] != "system")
    if call.data == "save_pdf":
        pdf_bytes = BytesIO()
        pdf = canvas.Canvas(pdf_bytes)
        y = 800
        for line in text.split("\n"):
            pdf.drawString(40, y, line)
            y -= 15
        pdf.save()
        pdf_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.pdf", pdf_bytes))
    else:
        doc = Document()
        doc.add_paragraph(text)
        word_bytes = BytesIO()
        doc.save(word_bytes)
        word_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.docx", word_bytes))

print("ü§ñ Neiro Max –∑–∞–ø—É—â–µ–Ω.")
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "!", 200
    else:
        return "Invalid content type", 403

@app.route("/yookassa/webhook", methods=["POST"])
def yookassa_webhook():
    data = request.json
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if data.get("object", {}).get("status") == "succeeded":
        description = data.get("object", {}).get("description", "")
        payment_id = data.get("object", {}).get("id")

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        try:
            parts = description.split(":")
            chat_id = int(parts[1])
            tariff = parts[2]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            if "gpt-4" in tariff.lower():
                user_models[str(chat_id)] = "gpt-4o"
            else:
                user_models[str(chat_id)] = "gpt-3.5-turbo"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –¥–Ω–µ–π)
            now = int(time.time())
            subscriptions_file = "subscriptions.json"
            if os.path.exists(subscriptions_file):
                with open(subscriptions_file, "r", encoding="utf-8") as f:
                    subscriptions = json.load(f)
            else:
                subscriptions = {}

            subscriptions[str(chat_id)] = {
                "model": user_models[str(chat_id)],
                "activated_at": now,
                "expires_at": now + 30 * 24 * 60 * 60,
                "token_limit": 100000,
                "warned": False
            }

            with open(subscriptions_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, ensure_ascii=False, indent=2)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: *{tariff}*", parse_mode="Markdown")

        except Exception as e:
            print(f"[webhook error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")

    if data.get('event') == 'payment.succeeded':
        obj = data['object']
        description = obj.get("description", "")
        metadata = obj.get("metadata", {})
        chat_id = metadata.get("chat_id")

        if not chat_id:
            return jsonify({"status": "chat_id missing"})

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
        if "GPT-3.5" in description:
            model = "gpt-3.5-turbo"
        elif "GPT-4" in description:
            model = "gpt-4o"
        else:
            return jsonify({"status": "unknown model"})

        # üîê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if chat_id in user_models:
            print(f"[Webhook] –ú–æ–¥–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è chat_id={chat_id}")
            return jsonify({"status": "already activated"})

        # ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        user_models[chat_id] = model
                # üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        token_limits = {
            "GPT-3.5 Lite": 50000,
            "GPT-3.5 Pro": 100000,
            "GPT-3.5 Max": 1000000,
            "GPT-4o Lite": 30000,
            "GPT-4o Pro": 60000,
            "GPT-4o Max": 1000000
        }
        token_limit = token_limits.get(description, 100000)

        # üóìÔ∏è –ó–∞–ø–∏—Å—å —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ (30 –¥–Ω–µ–π)
        subscription_file = "subscriptions.json"
        try:
            if os.path.exists(subscription_file):
                with open(subscription_file, "r", encoding="utf-8") as f:
                    subscriptions = json.load(f)
            else:
                subscriptions = {}

            expires_at = int(time.time()) + 30 * 86400  # 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
            subscriptions[str(chat_id)] = {
                "expires_at": expires_at,
                "warned": False,
                "token_limit": token_limit
            }

            with open(subscription_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, indent=2)

            print(f"[YooKassa] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {chat_id} –¥–æ {expires_at}")
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")

        bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: <b>{description}</b>", parse_mode="HTML")
        return jsonify({"status": "ok"})

    return jsonify({"status": "ignored"})


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
