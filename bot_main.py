import os
import json
import time
from pathlib import Path
from io import BytesIO

from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import pytesseract
from telebot import TeleBot, types
from docx import Document
from reportlab.pdfgen import canvas
import openai
from flask import Flask, request, jsonify
from yookassa import Configuration, Payment
from pdf2image import convert_from_bytes  # >>> FIX: –±—ã–ª –∏–º–ø–æ—Ä—Ç –Ω–∏–∂–µ, –ø–æ–¥–Ω—è–ª –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º

# === –ö–û–ù–§–ò–ì ===
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# === Business Pro: –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–ª–±—ç–∫–∏ (gpt-4o –∑–∞–∫—Ä–µ–ø–ª—ë–Ω) ===
BUSINESS_PRO_TIER = "business_pro"
BUSINESS_PRO_MODEL = "gpt-4o"
CB_BP_MENU = "bp_menu"
CB_BP_DOC_ANALYZE = "bp_doc_analyze"
CB_BP_OCR_IMAGE = "bp_ocr_image"
CB_BP_EXCEL = "bp_excel"
CB_BP_GEN_DOC = "bp_gen_doc"

def preprocess_image_for_ocr(image: Image.Image) -> Image.Image:
    # 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç –ø–æ EXIF
    img = ImageOps.exif_transpose(image)
    # 2) –ø–µ—Ä–µ–≤–æ–¥ –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
    img = img.convert("L")
    # 3) –∞–ø—Å–∫–µ–π–ª, –µ—Å–ª–∏ –º–µ–ª–∫–æ
    w, h = img.size
    if max(w, h) < 1600:
        img = img.resize((w * 2, h * 2))
    # 4) –∞–≤—Ç–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç + —à—É–º–æ–¥–∞–≤ + –ª—ë–≥–∫–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å
    img = ImageOps.autocontrast(img)
    img = img.filter(ImageFilter.MedianFilter(size=3))
    img = img.filter(ImageFilter.UnsharpMask(radius=1.3, percent=160, threshold=2))
    # 5) –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–ø–æ—Ä–æ–≥ –≤—ã—à–µ ‚Äî –ª—É—á—à–µ –¥–ª—è rus+eng)
    bw = img.point(lambda x: 0 if x < 160 else 255, '1')
    # Tesseract —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –µ—Å—Ç 8-–±–∏—Ç–Ω—ã–π —Å–µ—Ä—ã–π
    return bw.convert("L")


USED_TRIALS_FILE = "used_trials.json"
TRIAL_TIMES_FILE = "trial_times.json"
MEMORY_DIR = "memory"
ADMIN_ID = 1034982624


MAX_HISTORY = 20
TRIAL_TOKEN_LIMIT = 10_000
TRIAL_DURATION_SECONDS = 86400  # 24 —á–∞—Å–∞
BOT_NAME = "Neiro Max"

user_token_limits = {}
user_modes = {}
user_histories = {}
user_models = {}
trial_start_times = {}

# ‚úÖ –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–Ω–∏–∫–∞
def check_access_and_notify(chat_id):
    now = time.time()
    tokens_used = user_token_limits.get(chat_id, 0)

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ===
    is_trial = str(chat_id) not in user_models or user_models[str(chat_id)] == "gpt-3.5-turbo"
    trial_start = trial_start_times.get(str(chat_id))

    if is_trial and trial_start:
        time_elapsed = now - trial_start
        if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
            # –ñ–Å–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê
            bot.send_message(chat_id, "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
            return False

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ===
    subscription_file = "subscriptions.json"
    if os.path.exists(subscription_file):
        with open(subscription_file, "r", encoding="utf-8") as f:
            subscriptions = json.load(f)
    else:
        subscriptions = {}

    sub_data = subscriptions.get(str(chat_id))
    if sub_data:
        expires_at = sub_data.get("expires_at")
        warned = sub_data.get("warned", False)
        token_limit = sub_data.get("token_limit", 100000)

        # –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –±–ª–æ–∫
        if tokens_used >= token_limit:
            bot.send_message(chat_id, "‚õî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return False

        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫ ‚Äî –±–ª–æ–∫
        if expires_at and now > expires_at:
            bot.send_message(chat_id, "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ.")
            return False

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if expires_at and not warned and expires_at - now <= 86400:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
            subscriptions[str(chat_id)]["warned"] = True
            with open(subscription_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, indent=2)

    return True

available_modes = {
    "–ø—Å–∏—Ö–æ–ª–æ–≥": "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ–≤–æ—Ä–∏ —Å –∑–∞–±–æ—Ç–æ–π, –º—è–≥–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
    "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ –∂–∏–≤–æ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ.",
    "—é–º–æ—Ä–∏—Å—Ç": "–¢—ã ‚Äî –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å –æ—Ç–ª–∏—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —à—É—Ç–∫–∞–º–∏.",
    "–¥–µ–ª–æ–≤–æ–π": "–¢—ã ‚Äî –¥–µ–ª–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π.",
    "—Ñ–∏–ª–æ—Å–æ—Ñ": "–¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ì–æ–≤–æ—Ä–∏ –≥–ª—É–±–æ–∫–æ, —Ä–∞—Å—Å—É–∂–¥–∞–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π.",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä. –û–±—ä—è—Å–Ω—è–π –ø–æ–¥—Ä–æ–±–Ω–æ, –∞–∫–∞–¥–µ–º–∏—á–Ω–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
    "–≥–æ–ø–Ω–∏–∫": "–¢—ã ‚Äî –≥–æ–ø–Ω–∏–∫ –∏–∑ 90-—Ö. –ì–æ–≤–æ—Ä–∏ –¥–µ—Ä–∑–∫–æ, —Å —É–ª–∏—á–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º.",
    "–∏—Å—Ç–æ—Ä–∏–∏": "–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ü—Ä–µ–≤—Ä–∞—Ç–∏ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é."
}

def extract_chat_id_from_description(description):
    import re
    match = re.search(r'chat_id[:\s]*(\d+)', description)
    return int(match.group(1)) if match else None

def create_payment(amount_rub, description, return_url, chat_id):
    try:
        payment = Payment.create({
            "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": description,  # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            "metadata": {
                "chat_id": str(chat_id)
            }
        })
        print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", payment.confirmation.confirmation_url)
        return payment.confirmation.confirmation_url  # >>> FIX: —É–¥–∞–ª—ë–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è return
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:")
        import traceback
        traceback.print_exc()
        return None

def load_used_trials():
    if os.path.exists(USED_TRIALS_FILE):
        with open(USED_TRIALS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_trial_times(data):
    with open(TRIAL_TIMES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def load_token_usage():
    if os.path.exists("token_usage.json"):
        with open("token_usage.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_token_usage(data):
    with open("token_usage.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def save_used_trials(data):
    with open(USED_TRIALS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def is_admin(chat_id):
    return int(chat_id) == ADMIN_ID

def load_history(chat_id):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    return json.load(open(path, "r", encoding="utf-8")) if os.path.exists(path) else []

def save_history(chat_id, history):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(history[-MAX_HISTORY:], f, ensure_ascii=False, indent=2)

# >>> FIX: –¥–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É Business Pro –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω
def main_menu(chat_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
    markup.add("üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", "üìÑ –¢–∞—Ä–∏—Ñ—ã")
    markup.add("üìò –ü—Ä–∞–≤–∏–ª–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    if chat_id and is_business_pro_active(chat_id):
        markup.add("üìÇ Business Pro")
    if chat_id and is_admin(chat_id):
        markup.add("‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
    return markup

def style_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

def format_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÑ PDF", callback_data="save_pdf"))
    markup.add(types.InlineKeyboardButton("üìù Word", callback_data="save_word"))
    return markup

used_trials = load_used_trials()
try:
    with open(TRIAL_TIMES_FILE, "r", encoding="utf-8") as f:
        trial_start_times = json.load(f)
        print("üéØ trial_start_times –∑–∞–≥—Ä—É–∂–µ–Ω:", trial_start_times)
except:
    trial_start_times = {}
    print("‚ö†Ô∏è trial_start_times –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    pass

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY
bot = TeleBot(TELEGRAM_TOKEN)
# === ADMIN: —Ä—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è Business Pro ===
@bot.message_handler(commands=['bp_on'])
def bp_on(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ç–∞—Ä–∏—Ñ.")
        return
    chat_id = message.chat.id
    set_active_tier_for_chat(chat_id, BUSINESS_PRO_TIER)  # —Ñ–ª–∞–≥ —Ç–∞—Ä–∏—Ñ–∞
    notify_business_pro_activated(chat_id)                 # —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞


# === Business Pro: –ø—Ä–æ—Å—Ç–æ–µ JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∞—Ä–∏—Ñ–∞ + –ø—Ä–æ–≤–µ—Ä–∫–∞ ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ACTIVE_TIERS_FILE = os.path.join(BASE_DIR, "active_tiers.json")

def _json_read(path: str) -> dict:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _json_write(path: str, data: dict):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_active_tier_for_chat(chat_id: int) -> str | None:
    data = _json_read(ACTIVE_TIERS_FILE)
    return data.get(str(chat_id))

def set_active_tier_for_chat(chat_id: int, tier: str | None):
    data = _json_read(ACTIVE_TIERS_FILE)
    key = str(chat_id)
    if tier is None:
        data.pop(key, None)
    else:
        data[key] = tier
    _json_write(ACTIVE_TIERS_FILE, data)

def is_business_pro_active(chat_id: int) -> bool:
    try:
        return get_active_tier_for_chat(chat_id) == BUSINESS_PRO_TIER
    except Exception:
        return False

def notify_business_pro_activated(chat_id: int):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ + –∫–Ω–æ–ø–∫–∞ Business Pro."""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìÇ Business Pro", callback_data=CB_BP_MENU))
    bot.send_message(
        chat_id,
        "‚úÖ –í–∞—à —Ç–∞—Ä–∏—Ñ: GPT-4o Business Pro –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–æ—Ç–æ –∏ Excel.",
        reply_markup=kb,
    )

def send_bp_menu(chat_id: int):
    """–ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é Business Pro."""
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data=CB_BP_DOC_ANALYZE),
        types.InlineKeyboardButton("üñºÔ∏è OCR / —Ä–∞–∑–±–æ—Ä —Ñ–æ—Ç–æ", callback_data=CB_BP_OCR_IMAGE),
        types.InlineKeyboardButton("üìä Excel-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data=CB_BP_EXCEL),
        types.InlineKeyboardButton("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data=CB_BP_GEN_DOC),
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é Business Pro:", reply_markup=kb)

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if WEBHOOK_URL:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
Path(MEMORY_DIR).mkdir(exist_ok=True)

# === Business Pro: —Å–æ—Å—Ç–æ—è–Ω–∏–µ
BP_STATE = {}  # { user_id: {"mode": "doc"|"photo"|"gen"|"excel", "fmt": "docx"|"pdf", "excel_path": "..." } }

# === Business Pro: –∫–Ω–æ–ø–∫–∞ –≤ Reply –∏ –∫–æ–ª–±—ç–∫
@bot.message_handler(func=lambda m: m.text == "üìÇ Business Pro")
def open_bp_menu_by_text(message):
    if not is_business_pro_active(message.chat.id):
        bot.reply_to(message, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ Business Pro.")
        return
    send_bp_menu(message.chat.id)

@bot.callback_query_handler(func=lambda c: c.data == CB_BP_MENU)
def open_bp_menu_by_callback(call):
    if not is_business_pro_active(call.message.chat.id):
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ Business Pro")
        return
    send_bp_menu(call.message.chat.id)

# === Business Pro: —Ä–æ—É—Ç–∏–Ω–≥ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda c: c.data in (CB_BP_DOC_ANALYZE, CB_BP_OCR_IMAGE, CB_BP_EXCEL, CB_BP_GEN_DOC))
def bp_menu_router(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass

    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if not is_business_pro_active(chat_id):
        bot.send_message(chat_id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É <b>GPT-4o Business Pro</b>.", parse_mode="HTML")
        return

    if call.data == CB_BP_DOC_ANALYZE:
        BP_STATE[user_id] = {"mode": "doc"}
        bot.send_message(chat_id, "üìÑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª: PDF/DOCX/TXT/RTF/ODT.")
        return

    if call.data == CB_BP_OCR_IMAGE:
        BP_STATE[user_id] = {"mode": "photo"}
        bot.send_message(chat_id, "üñº –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/—Å–∫–∞–Ω (JPG/PNG) –∏–ª–∏ PDF. –°–¥–µ–ª–∞—é OCR –∏ –∫—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä.")
        return

    if call.data == CB_BP_EXCEL:
        BP_STATE[user_id] = {"mode": "excel"}
        bot.send_message(chat_id, "üìä –ü—Ä–∏—à–ª–∏—Ç–µ .xlsx –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞¬ª. –ü–æ—Å–ª–µ ‚Äî –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.")
        return

    if call.data == CB_BP_GEN_DOC:
        BP_STATE[user_id] = {"mode": "gen", "fmt": "docx"}  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é docx
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("DOCX", callback_data="bp_fmt_docx"),
               types.InlineKeyboardButton("PDF",  callback_data="bp_fmt_pdf"))
        bot.send_message(chat_id, "üßæ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", reply_markup=kb)
        return

@bot.callback_query_handler(func=lambda c: c.data in ("bp_fmt_docx", "bp_fmt_pdf"))
def bp_fmt_select(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    st = BP_STATE.get(user_id, {})
    if st.get("mode") != "gen":
        return
    st["fmt"] = "docx" if call.data.endswith("docx") else "pdf"
    BP_STATE[user_id] = st
    bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—É–Ω–∫—Ç—ã, —Å—Ç–∏–ª—å).")

# ===== Business Pro: –®–∞–≥ 2 ‚Äî –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ =====
import io
from datetime import datetime

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –±–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ –Ω–∏—Ö (—Ç–æ–≥–¥–∞ PDF/DOCX –Ω–µ —Ä–∞–∑–±–µ—Ä—ë—Ç)
try:
    import fitz  # PyMuPDF –¥–ª—è PDF
except Exception:
    fitz = None

try:
    import docx as docx_lib  # python-docx –¥–ª—è DOCX (–Ω–µ –ø—É—Ç–∞—Ç—å —Å Document)
except Exception:
    docx_lib = None

# –ú–∏–Ω–∏-—Ö–µ–ª–ø–µ—Ä GPT-4o
def _gpt4o(messages):
    try:
        from openai import OpenAI
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        r = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0.2)
        return r.choices[0].message.content
    except Exception:
        import openai
        openai.api_key = os.getenv("OPENAI_API_KEY")
        r = openai.ChatCompletion.create(model="gpt-4o", messages=messages, temperature=0.2)
        return r["choices"][0]["message"]["content"]

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
BP_DIR = Path(__file__).parent / "bp_files"
BP_DIR.mkdir(exist_ok=True)

def _save_tg_file(file_id: str, prefer_ext: str = "") -> Path:
    f = bot.get_file(file_id)
    b = bot.download_file(f.file_path)
    ext = os.path.splitext(f.file_path)[1] or prefer_ext
    name = f"bp_{int(datetime.now().timestamp())}_{file_id.replace('/','_')}{ext}"
    p = BP_DIR / name
    with open(p, "wb") as w:
        w.write(b)
    return p

def _read_pdf_text(path: Path) -> str:
    if not fitz:
        return ""
    try:
        doc = fitz.open(str(path))
        chunks = []
        for page in doc:
            t = page.get_text()
            if t:
                chunks.append(t.strip())
        return "\n".join(chunks).strip()
    except Exception:
        return ""

def _read_docx_text(path: Path) -> str:
    if not docx_lib:
        return ""
    try:
        d = docx_lib.Document(str(path))
        parts = [p.text for p in d.paragraphs if p.text]
        for t in d.tables:
            for row in t.rows:
                parts.append("\t".join(c.text for c in row.cells))
        return "\n".join(parts).strip()
    except Exception:
        return ""

def _read_txt(path: Path) -> str:
    for enc in ("utf-8", "cp1251", "latin-1"):
        try:
            return path.read_text(encoding=enc)
        except Exception:
            continue
    return path.read_bytes().decode(errors="ignore")

def _extract_text(path: Path) -> str:
    ext = path.suffix.lower()
    if ext == ".pdf":
        return _read_pdf_text(path)
    if ext == ".docx":
        return _read_docx_text(path)
    if ext in (".txt", ".rtf", ".odt"):
        # rtf/odt ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        return _read_txt(path)
    return ""

@bot.message_handler(content_types=['document'])
def bp_handle_document(message):
    st = BP_STATE.get(message.from_user.id, {})
    mode = st.get("mode")
    if mode not in ("doc", "excel"):
        return  # –Ω–µ –Ω–∞—à —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏

    if message.chat.type != "private":
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –õ–°.")
        return

    if not is_business_pro_active(message.chat.id):
        bot.reply_to(message, "üîí –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É <b>GPT-4o Business Pro</b>.", parse_mode="HTML")
        return

    # Excel —Ä–µ–∂–∏–º
    if mode == "excel":
        if not (message.document and message.document.file_name.lower().endswith(".xlsx")):
            bot.reply_to(message, "–ù—É–∂–µ–Ω .xlsx —Ñ–∞–π–ª.")
            return
        path = _save_tg_file(message.document.file_id)
        BP_STATE[message.from_user.id]["excel_path"] = str(path)
        try:
            import openpyxl
            wb = openpyxl.load_workbook(str(path), data_only=True)
            infos = []
            for name in wb.sheetnames:
                ws = wb[name]
                dims = f"{ws.max_row} —Å—Ç—Ä–æ–∫ √ó {ws.max_column} —Å—Ç–æ–ª–±."
                headers = [str(c.value) if c.value is not None else "" for c in ws[1]]
                infos.append(f"‚Ä¢ {name}: {dims}\n  –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers[:10])}")
            bot.reply_to(message, "üìä –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã:\n" + "\n".join(infos) + "\n\n–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–∞–±–ª–∏—Ü–µ.")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        return

    # –î–æ–∫—É–º–µ–Ω—Ç—ã (pdf/docx/txt/rtf/odt)
    path = _save_tg_file(message.document.file_id)
    if message.document.file_name.lower().endswith(".xlsx"):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–ø—É—Ç–∞–ª —Ä–µ–∂–∏–º ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º
        bot.reply_to(message, "–≠—Ç–æ Excel. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´üìä Excel-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç¬ª –≤ –º–µ–Ω—é Business Pro.")
        return

    text = _extract_text(path)
    if not text:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏ PyMuPDF (PDF) –∏ python-docx (DOCX).")
        BP_STATE.pop(message.from_user.id, None)
        return

    bot.send_chat_action(message.chat.id, "typing")
    try:
        brief = _gpt4o([
            {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, —á—ë—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
            {"role": "user", "content":
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥–∞–π:\n"
                "1) –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è),\n"
                "2) –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (—Å–ø–∏—Å–∫–æ–º),\n"
                "3) —Ä–∏—Å–∫–∏/–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏,\n"
                "4) —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
                f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name}\n"
                f"–¢–µ–∫—Å—Ç:\n{text[:12000]}"}
        ])
        bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞–∑–±–æ—Ä <b>{message.document.file_name}</b>:\n\n{brief}",
            parse_mode="HTML"
        )
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    finally:
        BP_STATE.pop(message.from_user.id, None)

        if message.content_type == 'document' and (message.document.mime_type == 'application/pdf' or message.document.file_name.lower().endswith(".pdf")):
            # –°–ù–ê–ß–ê–õ–ê –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF (–±–µ–∑ OCR)
            pdf_bytes = file_bytes.getvalue()
            try:
                import fitz  # PyMuPDF
                with fitz.open(stream=pdf_bytes, filetype="pdf") as doc:
                    parts = []
                    for page in doc:
                        t = page.get_text("text").strip()
                        if t:
                            parts.append(t)
                pdf_text = "\n".join(parts).strip()
            except Exception:
                pdf_text = ""

            if pdf_text:
                # –í PDF –±—ã–ª –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–¥–∞—ë–º –µ–≥–æ –±–µ–∑ OCR (–±—É–¥–µ—Ç –∑–∞–º–µ—Ç–Ω–æ —á–∏—â–µ)
                bot.send_message(message.chat.id, f'üìÑ –¢–µ–∫—Å—Ç –∏–∑ PDF (–±–µ–∑ OCR):\n\n{pdf_text[:4000]}')
                return

# –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤ PDF –Ω–µ—Ç (—Å–∫–∞–Ω), —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –∏–¥—ë–º –≤ OCR
file_bytes.seek(0)
images = convert_from_bytes(file_bytes.read(), dpi=350)  # –º–æ–∂–Ω–æ 350‚Äì400
  # –±—ã–ª–æ 300

        else:
            img = Image.open(file_bytes)
            images = [img]

        text = ''
        for img in images:
            processed_img = preprocess_image_for_ocr(img)
            text += pytesseract.image_to_string(
    processed_img,
    lang='rus+eng',
    config="--oem 3 --psm 6 -c preserve_interword_spaces=1"
) + '\n'


        text = text.strip()
        if not text:
            text = 'üßê –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF.'

        # >>> FIX: —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–∏ ¬´–≤—ã–ø–∞–ª–∏¬ª –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –ª–æ–º–∞–ª–∏ –∫–æ–¥
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç OCR:\n", text[:500])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            images[0].save(f"/tmp/ocr_debug_{int(time.time())}.png")
        except Exception:
            pass

        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º Business Pro (photo) ‚Äî –¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä GPT-4o
        if in_bp_photo and is_business_pro_active(message.chat.id):
            summary = _gpt4o([
                {"role": "system", "content": "–ö—Ä–∞—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –¥–∞—Ç—ã, —Å—É–º–º—ã, –∏–º–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è."},
                {"role": "user", "content": text[:12000]}
            ])
            bot.send_message(message.chat.id, f'üñºÔ∏è OCR + —Ä–∞–∑–±–æ—Ä:\n\n{summary[:4000]}')
            BP_STATE.pop(message.from_user.id, None)
        else:
            bot.send_message(message.chat.id, f'üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text[:4000]}')

    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n{e}')

@bot.message_handler(commands=["start"])
def handle_start(message):
    chat_id = str(message.chat.id)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    user_modes[message.chat.id] = "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
    user_histories[message.chat.id] = []

    if message.chat.id == ADMIN_ID:
        user_models[message.chat.id] = "gpt-4o"
    else:
        user_models[message.chat.id] = "gpt-3.5-turbo"

    user_token_limits[message.chat.id] = 0

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME} ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu(message.chat.id)
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –¢–∞—Ä–∏—Ñ—ã")
def handle_tariffs(message):
    return_url = "https://t.me/NeiroMaxBot"
    buttons = []
    tariffs = [
        ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
        ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
        ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
        ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
        ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
        ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max"),
        ("GPT-4o: Business Pro ‚Äì 2000‚ÇΩ", 2000, "GPT-4o Business Pro"),
    ]
    for label, price, desc in tariffs:
        full_desc = desc
        url = create_payment(price, full_desc, return_url, message.chat.id)
        if url:
            buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
    markup = types.InlineKeyboardMarkup(row_width=1)
    for btn in buttons:
        markup.add(btn)
    bot.send_message(message.chat.id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
def handle_reset_trial(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (–º–æ–∂–Ω–æ —Å–≤–æ–π):")
    bot.register_next_step_handler(message, reset_trial_by_id)

def reset_trial_by_id(message):
    target_id = message.text.strip()
    if not target_id.isdigit():
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å chat_id.")
        return
    if target_id in used_trials:
        del used_trials[target_id]
    trial_start_times.pop(target_id, None)
    save_used_trials(used_trials)
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å–±—Ä–æ—à–µ–Ω –¥–ª—è chat_id {target_id}.")

@bot.message_handler(func=lambda msg: msg.text == "üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
def handle_change_style(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üìò –ü—Ä–∞–≤–∏–ª–∞")
def handle_rules(message):
    rules_text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ Neiro Max:</b>\n\n"
        "‚úÖ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 24 —á–∞—Å–∞ –∏–ª–∏ 10 000 —Ç–æ–∫–µ–Ω–æ–≤ (—á—Ç–æ –Ω–∞—Å—Ç—É–ø–∏—Ç —Ä–∞–Ω—å—à–µ).\n\n"
        "‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§;\n"
        "‚Ä¢ –¢–µ–º—ã: –Ω–∞—Å–∏–ª–∏–µ, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º, —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ GPT-—á–∞—Ç –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏.\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Neiro Max!"
    )
    bot.send_message(message.chat.id, rules_text, parse_mode="HTML")

@bot.message_handler(func=lambda msg: any(phrase in msg.text.lower() for phrase in [
    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ—ë –∏–º—è", "—Ç—ã –∫—Ç–æ", "–∫–∞–∫ –∑–≤–∞—Ç—å", "–Ω–∞–∑—ã–≤–∞–µ—à—å—Å—è", "–Ω–∞–∑–æ–≤–∏ —Å–µ–±—è"
]))
def handle_bot_name(message):
    bot.send_message(message.chat.id, f"–Ø ‚Äî {BOT_NAME}, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üòâ")

@bot.message_handler(func=lambda msg: msg.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(message.chat.id))

@bot.message_handler(func=lambda msg: msg.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
def handle_launch_neiro_max(message):
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu(message.chat.id))

# >>> FIX: —É–±—Ä–∞–ª –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –≤—Ç–æ—Ä–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

@bot.message_handler(func=lambda msg: True)
def handle_prompt(message):
    chat_id = str(message.chat.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Business Pro –∂–¥—ë—Ç —Ç–µ–∫—Å—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/Excel ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    st = BP_STATE.get(message.from_user.id, {})
    mode = st.get("mode")
    if is_business_pro_active(message.chat.id) and mode in ("gen", "excel"):
        if mode == "gen":
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX/PDF –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            text_spec = (message.text or "").strip()
            if not text_spec:
                bot.reply_to(message, "–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
                return
            # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Ç–µ–∫—Å—Ç–∞ —É gpt-4o
            body = _gpt4o([
                {"role": "system", "content": "–°–æ–±–µ—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫."},
                {"role": "user", "content": text_spec[:8000]}
            ])
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX
            doc = Document()
            for para in body.split("\n\n"):
                doc.add_paragraph(para)
            doc_bytes = BytesIO()
            doc.save(doc_bytes)
            doc_bytes.seek(0)

            # PDF (–ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥)
            pdf_bytes = None
            if st.get("fmt") == "pdf":
                pdf_bytes = BytesIO()
                pdf = canvas.Canvas(pdf_bytes)
                y = 800
                for line in body.split("\n"):
                    pdf.drawString(40, y, line[:95])
                    y -= 15
                    if y < 40:
                        pdf.showPage()
                        y = 800
                pdf.save()
                pdf_bytes.seek(0)

            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã:")
            bot.send_document(message.chat.id, ("document.docx", doc_bytes))
            if pdf_bytes:
                bot.send_document(message.chat.id, ("document.pdf", pdf_bytes))
            BP_STATE.pop(message.from_user.id, None)
            return

        if mode == "excel":
            # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ Excel
            task = (message.text or "").strip().lower()
            path = st.get("excel_path")
            if task.startswith("–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞") and not path:
                # —Å–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                try:
                    import openpyxl
                    from openpyxl import Workbook
                    wb = Workbook()
                    ws = wb.active
                    ws.title = "Data"
                    ws.append(["date", "category", "amount"])
                    ws.append(["2025-08-01", "sales", 1200])
                    ws.append(["2025-08-02", "ads", -300])
                    tmp = BytesIO()
                    wb.save(tmp)
                    tmp.seek(0)
                    bot.send_document(message.chat.id, ("template.xlsx", tmp))
                except Exception as e:
                    bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")
                BP_STATE.pop(message.from_user.id, None)
                return

            if not path:
                bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ .xlsx —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞¬ª.")
                return

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel.
            plan = _gpt4o([
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Excel. –°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–ª–∞–Ω —à–∞–≥–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏ —Ñ–æ—Ä–º—É–ª—ã/—Å–≤–æ–¥–Ω—ã–µ, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ."},
                {"role": "user", "content": f"–§–∞–π–ª: {os.path.basename(path)}\n–ó–∞–¥–∞—á–∞: {message.text[:4000]}"}
            ])
            bot.send_message(message.chat.id, f"üìä –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n{plan}")
            try:
                with open(path, "rb") as f:
                    bot.send_document(message.chat.id, f, visible_file_name=os.path.basename(path))
            except Exception:
                pass
            BP_STATE.pop(message.from_user.id, None)
            return

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–∞—Ä–∏—Ñ/–ø—Ä–æ–±–Ω–∏–∫)
    if not check_access_and_notify(chat_id):
        return

    # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç –ø—Ä–æ–±–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if chat_id not in trial_start_times:
        trial_start_times[chat_id] = time.time()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏
    tokens_used = user_token_limits.get(chat_id, 0)
    time_elapsed = time.time() - trial_start_times[chat_id]
    if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
        # ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–∏–∫–∞ + –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        return_url = "https://t.me/NeiroMaxBot"
        buttons = []
        tariffs = [
            ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
            ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
            ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
            ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
            ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
            ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max")
        ]
        for label, price, desc in tariffs:
            url = create_payment(price, desc, return_url, chat_id)
            if url:
                buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for btn in buttons:
            markup.add(btn)
        bot.send_message(
            chat_id,
            "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=markup
        )
        return

    prompt = message.text.strip()
    mode = user_modes.get(chat_id, "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä")
    model = user_models.get(chat_id, "gpt-3.5-turbo")

    # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∏–ª—é
    forbidden = {
        "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": ["–ø—Å–∏—Ö–æ–ª–æ–≥", "–¥–µ–ø—Ä–µ—Å—Å", "–ø–æ–¥–¥–µ—Ä–∂", "—Ç—Ä–µ–≤–æ–∂"],
        "–¥–µ–ª–æ–≤–æ–π": ["—é–º–æ—Ä", "—à—É—Ç–∫", "–ø—Ä–∏–∫–æ–ª"],
        "–≥–æ–ø–Ω–∏–∫": ["–∞–∫–∞–¥–µ–º", "–Ω–∞—É—á–Ω", "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä"],
        "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": ["—à—É—Ç–∫", "–≥–æ–ø–Ω–∏–∫", "–∂–∏–∑–∞"]
    }
    if any(word in prompt.lower() for word in forbidden.get(mode, [])):
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: <b>{mode.capitalize()}</b>.\n–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é.\n–°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üí°", parse_mode="HTML")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    history = load_history(chat_id)
    messages = [{"role": "system", "content": available_modes[mode]}] + history + [{"role": "user", "content": prompt}]

    try:
        response = openai.ChatCompletion.create(model=model, messages=messages)
        reply = response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏—é
    user_token_limits[chat_id] = tokens_used + len(prompt)
    history.append({"role": "user", "content": prompt})
    history.append({"role": "assistant", "content": reply})
    save_history(chat_id, history)

    bot.send_message(chat_id, reply, reply_markup=format_buttons())

@bot.callback_query_handler(func=lambda call: call.data in ["save_pdf", "save_word"])
def handle_file_format(call):
    chat_id = call.message.chat.id
    history = load_history(str(chat_id))
    text = "\n".join(m["content"] for m in history if m["role"] != "system")
    if call.data == "save_pdf":
        pdf_bytes = BytesIO()
        pdf = canvas.Canvas(pdf_bytes)
        y = 800
        for line in text.split("\n"):
            pdf.drawString(40, y, line[:95])
            y -= 15
            if y < 40:
                pdf.showPage()
                y = 800
        pdf.save()
        pdf_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.pdf", pdf_bytes))
    else:
        doc = Document()
        doc.add_paragraph(text)
        word_bytes = BytesIO()
        doc.save(word_bytes)
        word_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.docx", word_bytes))

print("ü§ñ Neiro Max –∑–∞–ø—É—â–µ–Ω.")
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "!", 200
    else:
        return "Invalid content type", 403

@app.route("/yookassa/webhook", methods=["POST"])
def yookassa_webhook():
    data = request.json

    # –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if data.get("object", {}).get("status") == "succeeded":
        description = data.get("object", {}).get("description", "")
        payment_id = data.get("object", {}).get("id")
        # chat_id —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –∏–∑ metadata –≤–æ –≤—Ç–æ—Ä–æ–º –±–ª–æ–∫–µ ‚Äî —ç—Ç–æ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ fallback
        pass

    if data.get('event') == 'payment.succeeded':
        obj = data['object']
        description = obj.get("description", "")
        metadata = obj.get("metadata", {})
        chat_id = metadata.get("chat_id")

        if not chat_id:
            return jsonify({"status": "chat_id missing"})

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
        if "GPT-3.5" in description:
            model = "gpt-3.5-turbo"
        elif "GPT-4" in description:
            model = "gpt-4o"
        else:
            return jsonify({"status": "unknown model"})

        # üîê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if chat_id in user_models:
            print(f"[Webhook] –ú–æ–¥–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è chat_id={chat_id}")
            # –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–∏–º Business Pro, –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω
            if "Business Pro" in description:
                set_active_tier_for_chat(chat_id, BUSINESS_PRO_TIER)
            return jsonify({"status": "already activated"})

        # ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        user_models[chat_id] = model

        # üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        token_limits = {
            "GPT-3.5 Lite": 50000,
            "GPT-3.5 Pro": 100000,
            "GPT-3.5 Max": 1000000,
            "GPT-4o Lite": 30000,
            "GPT-4o Pro": 60000,
            "GPT-4o Max": 1000000,
            "GPT-4o Business Pro": 200000  # >>> Business Pro –ª–∏–º–∏—Ç
        }
        token_limit = token_limits.get(description, 100000)

        # üóìÔ∏è –ó–∞–ø–∏—Å—å —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ (30 –¥–Ω–µ–π)
        subscription_file = "subscriptions.json"
        try:
            if os.path.exists(subscription_file):
                with open(subscription_file, "r", encoding="utf-8") as f:
                    subscriptions = json.load(f)
            else:
                subscriptions = {}

            expires_at = int(time.time()) + 30 * 86400  # 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
            subscriptions[str(chat_id)] = {
                "expires_at": expires_at,
                "warned": False,
                "token_limit": token_limit
            }

            with open(subscription_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, indent=2)

            print(f"[YooKassa] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {chat_id} –¥–æ {expires_at}")
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")

        # >>> Business Pro: –≤–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Ç–∞—Ä–∏—Ñ–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if "Business Pro" in description:
            set_active_tier_for_chat(chat_id, BUSINESS_PRO_TIER)
            notify_business_pro_activated(chat_id)

        bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: <b>{description}</b>", parse_mode="HTML")
        return jsonify({"status": "ok"})

    return jsonify({"status": "ignored"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
