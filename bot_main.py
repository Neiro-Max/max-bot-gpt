
import os
import json
import time
from pathlib import Path
from io import BytesIO

from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import pytesseract
from telebot import TeleBot, types
from docx import Document
from reportlab.pdfgen import canvas
import openai
from flask import Flask, request, jsonify
from yookassa import Configuration, Payment

# === –ö–û–ù–§–ò–ì ===
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY
def preprocess_image_for_ocr(image: Image.Image) -> Image.Image:
    # –ü–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    gray = image.convert('L')

    # –£—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    enhancer = ImageEnhance.Contrast(gray)
    gray = enhancer.enhance(2.0)

    # –ß–∏—Å—Ç–∏–º —à—É–º
    gray = gray.filter(ImageFilter.MedianFilter(size=3))

    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (—á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    bw = gray.point(lambda x: 0 if x < 140 else 255, '1')

    return bw


USED_TRIALS_FILE = "used_trials.json"
TRIAL_TIMES_FILE = "trial_times.json"
MEMORY_DIR = "memory"
ADMIN_ID = 1034982624
MAX_HISTORY = 20
TRIAL_TOKEN_LIMIT = 10_000
TRIAL_DURATION_SECONDS = 86400  # 24 —á–∞—Å–∞
BOT_NAME = "Neiro Max"

user_token_limits = {}
user_modes = {}
user_histories = {}
user_models = {}
trial_start_times = {}
# ‚úÖ –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–Ω–∏–∫–∞
def check_access_and_notify(chat_id):
    now = time.time()
    tokens_used = user_token_limits.get(chat_id, 0)

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ===
    is_trial = str(chat_id) not in user_models or user_models[str(chat_id)] == "gpt-3.5-turbo"
    trial_start = trial_start_times.get(str(chat_id))

    if is_trial and trial_start:
        time_elapsed = now - trial_start
        if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
            # –ñ–Å–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê
            bot.send_message(chat_id, "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
            return False

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ===
    subscription_file = "subscriptions.json"
    if os.path.exists(subscription_file):
        with open(subscription_file, "r", encoding="utf-8") as f:
            subscriptions = json.load(f)
    else:
        subscriptions = {}

    sub_data = subscriptions.get(str(chat_id))
    if sub_data:
        expires_at = sub_data.get("expires_at")
        warned = sub_data.get("warned", False)
        token_limit = sub_data.get("token_limit", 100000)

        # –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –±–ª–æ–∫
        if tokens_used >= token_limit:
            bot.send_message(chat_id, "‚õî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return False

        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫ ‚Äî –±–ª–æ–∫
        if expires_at and now > expires_at:
            bot.send_message(chat_id, "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ.")
            return False

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if expires_at and not warned and expires_at - now <= 86400:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
            subscriptions[str(chat_id)]["warned"] = True
            with open(subscription_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, indent=2)

    return True


available_modes = {
    "–ø—Å–∏—Ö–æ–ª–æ–≥": "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ–≤–æ—Ä–∏ —Å –∑–∞–±–æ—Ç–æ–π, –º—è–≥–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
    "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ –∂–∏–≤–æ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ.",
    "—é–º–æ—Ä–∏—Å—Ç": "–¢—ã ‚Äî –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å –æ—Ç–ª–∏—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —à—É—Ç–∫–∞–º–∏.",
    "–¥–µ–ª–æ–≤–æ–π": "–¢—ã ‚Äî –¥–µ–ª–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π.",
    "—Ñ–∏–ª–æ—Å–æ—Ñ": "–¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ì–æ–≤–æ—Ä–∏ –≥–ª—É–±–æ–∫–æ, —Ä–∞—Å—Å—É–∂–¥–∞–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π.",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä. –û–±—ä—è—Å–Ω—è–π –ø–æ–¥—Ä–æ–±–Ω–æ, –∞–∫–∞–¥–µ–º–∏—á–Ω–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
    "–≥–æ–ø–Ω–∏–∫": "–¢—ã ‚Äî –≥–æ–ø–Ω–∏–∫ –∏–∑ 90-—Ö. –ì–æ–≤–æ—Ä–∏ –¥–µ—Ä–∑–∫–æ, —Å —É–ª–∏—á–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º.",
    "–∏—Å—Ç–æ—Ä–∏–∏": "–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ü—Ä–µ–≤—Ä–∞—â–∞–π –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é."
}

def extract_chat_id_from_description(description):
    import re
    match = re.search(r'chat_id[:\s]*(\d+)', description)
    return int(match.group(1)) if match else None


def create_payment(amount_rub, description, return_url, chat_id):
    try:
        payment = Payment.create({
            "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": description,  # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            "metadata": {
                "chat_id": str(chat_id)
            }
        })
        print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", payment.confirmation.confirmation_url)
        return payment.confirmation.confirmation_url
        return payment.confirmation.confirmation_url
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:")
        import traceback
        traceback.print_exc()
        return None
def load_used_trials():
    if os.path.exists(USED_TRIALS_FILE):
        with open(USED_TRIALS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_trial_times(data):
    with open(TRIAL_TIMES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def load_token_usage():
    if os.path.exists("token_usage.json"):
        with open("token_usage.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_token_usage(data):
    with open("token_usage.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def save_used_trials(data):
    with open(USED_TRIALS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def is_admin(chat_id):
    return int(chat_id) == ADMIN_ID

def load_history(chat_id):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    return json.load(open(path, "r", encoding="utf-8")) if os.path.exists(path) else []

def save_history(chat_id, history):
    path = f"{MEMORY_DIR}/{chat_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(history[-MAX_HISTORY:], f, ensure_ascii=False, indent=2)

def main_menu(chat_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
    markup.add("üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", "üìÑ –¢–∞—Ä–∏—Ñ—ã")
    markup.add("üìò –ü—Ä–∞–≤–∏–ª–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    if chat_id and is_admin(chat_id):
        markup.add("‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
    return markup


def style_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

def format_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÑ PDF", callback_data="save_pdf"))
    markup.add(types.InlineKeyboardButton("üìù Word", callback_data="save_word"))
    return markup

used_trials = load_used_trials()
try:
    with open(TRIAL_TIMES_FILE, "r", encoding="utf-8") as f:
        trial_start_times = json.load(f)
        print("üéØ trial_start_times –∑–∞–≥—Ä—É–∂–µ–Ω:", trial_start_times)
except:
    trial_start_times = {}
    print("‚ö†Ô∏è trial_start_times –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    pass
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY
bot = TeleBot(TELEGRAM_TOKEN)
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if WEBHOOK_URL:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
Path(MEMORY_DIR).mkdir(exist_ok=True)
@bot.message_handler(commands=["start"])
def handle_start(message):
    chat_id = str(message.chat.id)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    user_modes[message.chat.id] = "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
    user_histories[message.chat.id] = []

    if message.chat.id == ADMIN_ID:
        user_models[message.chat.id] = "gpt-4o"
    else:
        user_models[message.chat.id] = "gpt-3.5-turbo"

    user_token_limits[message.chat.id] = 0

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME} ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu(message.chat.id)
    )

from PIL import Image, ImageEnhance, ImageFilter
from pdf2image import convert_from_bytes
import pytesseract
from io import BytesIO

@bot.message_handler(content_types=['document', 'photo'])
def handle_ocr_file(message):
    try:
        file_id = message.document.file_id if message.content_type == 'document' else message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_bytes = BytesIO(downloaded_file)

        text = ''
        if message.content_type == 'document' and message.document.mime_type == 'application/pdf':
            images = convert_from_bytes(file_bytes.read(), dpi=300)
        else:
            img = Image.open(file_bytes)
            images = [img]

        for img in images:
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_img = preprocess_image_for_ocr(img)

            # OCR
            text += pytesseract.image_to_string(processed_img, lang='rus+eng') + '\n'

        text = text.strip()
        if not text:
            text = 'üßê –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF.'
            # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç OCR:\n", text)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–∞–ª–∏ –≤ Tesseract
# (–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å)
img.save(f"/tmp/ocr_debug_{time.time()}.png")


        bot.send_message(message.chat.id, f'üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text[:4000]}')

    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n{e}')




@bot.message_handler(func=lambda msg: msg.text == "üìÑ –¢–∞—Ä–∏—Ñ—ã")
def handle_tariffs(message):
    return_url = "https://t.me/NeiroMaxBot"
    buttons = []
    tariffs = [
        ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
        ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
        ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
        ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
        ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
        ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max"),
        ("GPT-4o: Business Pro ‚Äì 2000‚ÇΩ", 2000, "GPT-4o Business Pro"),

    ]
    for label, price, desc in tariffs:
        full_desc = desc  # üîß –£–ë–†–ê–õ chat_id
        url = create_payment(price, full_desc, return_url, message.chat.id)
        if url:
            buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
    markup = types.InlineKeyboardMarkup(row_width=1)
    for btn in buttons:
        markup.add(btn)
    bot.send_message(message.chat.id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "‚ôªÔ∏è –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–∏–∫–∞")
def handle_reset_trial(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (–º–æ–∂–Ω–æ —Å–≤–æ–π):")
    bot.register_next_step_handler(message, reset_trial_by_id)

def reset_trial_by_id(message):
    target_id = message.text.strip()
    if not target_id.isdigit():
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å chat_id.")
        return
    if target_id in used_trials:
        del used_trials[target_id]
    trial_start_times.pop(target_id, None)
    save_used_trials(used_trials)
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å–±—Ä–æ—à–µ–Ω –¥–ª—è chat_id {target_id}.")

# === Business Pro (GPT-4o) ‚Äî –º–µ–Ω—é –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ===
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã ‚Äî –¥—É–±–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã)
import os, io, re, json, base64, zipfile
from pathlib import Path
from datetime import datetime, timezone, timedelta

import telebot
from telebot import types

# --- –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
try:
    import fitz  # PyMuPDF
except Exception:
    fitz = None

try:
    import docx  # python-docx
except Exception:
    docx = None

try:
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas as rl_canvas
except Exception:
    rl_canvas = None

try:
    from PIL import Image
except Exception:
    Image = None

try:
    import pytesseract
except Exception:
    pytesseract = None

try:
    import openpyxl
    from openpyxl.utils import get_column_letter
except Exception:
    openpyxl = None

# --- OpenAI –∫–ª–∏–µ–Ω—Ç: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ –∏ —Å—Ç–∞—Ä–æ–≥–æ SDK ---
_OAI_MODELS = {"business_pro": "gpt-4o"}

def _oai_client_factory():
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return None, None
    try:
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        def chat(messages, model="gpt-4o", temperature=0.2):
            resp = client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=temperature
            )
            return resp.choices[0].message.content
        def chat_vision(messages, model="gpt-4o"):
            # messages ‚Äî —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role":"user","content":[{type:"text"...},{type:"input_image",...}]}]
            resp = client.chat.completions.create(model=model, messages=messages)
            return resp.choices[0].message.content
        return chat, chat_vision
    except Exception:
        # —Å—Ç–∞—Ä—ã–π SDK
        try:
            import openai
            openai.api_key = api_key
            def chat(messages, model="gpt-4o", temperature=0.2):
                resp = openai.ChatCompletion.create(
                    model=model,
                    messages=messages,
                    temperature=temperature
                )
                return resp["choices"][0]["message"]["content"]
            # —Å—Ç–∞—Ä—ã–π SDK –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision-—Ñ–æ—Ä–º–∞—Ç –≤ ChatCompletion —É–¥–æ–±–Ω–æ ‚Äî –¥–∞–¥–∏–º OCR+—Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            def chat_vision(messages, model="gpt-4o"):
                # —É–ø–∞–¥—ë–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –æ–±—ã—á–Ω—ã–π —á–∞—Ç: –≤ messages –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫—É—Å–æ–∫
                flat = []
                for m in messages:
                    text_parts = []
                    content = m.get("content")
                    if isinstance(content, list):
                        for part in content:
                            if part.get("type") == "text":
                                text_parts.append(part.get("text",""))
                    else:
                        text_parts.append(str(content))
                    flat.append({"role": m.get("role","user"), "content": "\n".join(text_parts)})
                return chat(flat, model=model)
            return chat, chat_vision
        except Exception:
            return None, None

_bp_chat, _bp_chat_vision = _oai_client_factory()

# --- –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
BP_DIR = Path(__file__).parent / "bp_files"
BP_DIR.mkdir(parents=True, exist_ok=True)

def _utcnow():
    return datetime.now(timezone.utc).replace(tzinfo=None)

# --- —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ Business Pro (PostgreSQL —á–µ—Ä–µ–∑ pg_conn, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) ---
def _bp_db_init():
    try:
        conn = pg_conn()
        with conn, conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_tariffs (
                    user_id BIGINT PRIMARY KEY,
                    tariff_code TEXT NOT NULL,
                    expires TIMESTAMP NOT NULL
                )
            """)
        conn.commit(); conn.close()
    except Exception as e:
        print(f"[BP] DB init skip/fallback: {e}")

_bp_db_init()

def bp_set_tariff(user_id: int, tariff_code: str, days: int):
    """–í—ã–¥–∞—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è YooKassa-—Ö–µ–Ω–¥–ª–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º)."""
    try:
        conn = pg_conn()
        with conn, conn.cursor() as cur:
            cur.execute("SELECT expires FROM user_tariffs WHERE user_id=%s", (user_id,))
            row = cur.fetchone()
            now = _utcnow()
            cur_exp = row[0] if row else None
            new_exp = (max(cur_exp, now) if cur_exp else now) + timedelta(days=max(1, days))
            cur.execute("""
                INSERT INTO user_tariffs (user_id, tariff_code, expires)
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id) DO UPDATE SET tariff_code=EXCLUDED.tariff_code, expires=EXCLUDED.expires
            """, (user_id, tariff_code, new_exp))
        conn.commit(); conn.close()
        return new_exp
    except Exception as e:
        print(f"[BP] bp_set_tariff fallback ({e}). Allow ADMIN_ID only.")
        # –§–æ–ª–ª–±–µ–∫: –±–µ–∑ –ë–î ‚Äî —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        return None

def bp_is_active_business_pro(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Business Pro. –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –Ω–µ—Ç –ë–î ‚Äî –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID."""
    try:
        conn = pg_conn()
        with conn, conn.cursor() as cur:
            cur.execute("SELECT tariff_code, expires FROM user_tariffs WHERE user_id=%s", (user_id,))
            row = cur.fetchone()
        conn.close()
        if not row:
            return False
        code, exp = row
        return (code == "business_pro") and (_utcnow() < exp)
    except Exception:
        return (str(user_id) == str(ADMIN_ID))  # —Ñ–æ–ª–ª–±–µ–∫-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞: —Ç–µ—Å—Ç–∏–º –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ

# --- –º–∏–Ω–∏-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ Business Pro ---
BP_STATE = {}  # { user_id: {"mode": "...", ...} }

def bp_require_active(message) -> bool:
    """–ì–µ–π—Ç: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ —Ç–∞—Ä–∏—Ñ—É."""
    uid = message.from_user.id
    if not bp_is_active_business_pro(uid):
        bot.send_message(message.chat.id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É <b>GPT-4o Business Pro</b>.\n–û—Ñ–æ—Ä–º–∏—Ç–µ/–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", parse_mode="HTML")
        return False
    if _bp_chat is None:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OPENAI_API_KEY. –£–∫–∞–∂–∏ –∫–ª—é—á –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.")
        return False
    return True

# --- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Business Pro ---
def bp_menu_markup():
    mk = types.InlineKeyboardMarkup()
    mk.add(types.InlineKeyboardButton("üìÑ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="bp_doc"))
    mk.add(types.InlineKeyboardButton("üñº –§–æ—Ç–æ: OCR + —Ä–∞–∑–±–æ—Ä (GPT-4o Vision)", callback_data="bp_photo"))
    mk.add(types.InlineKeyboardButton("üßæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (DOCX/PDF)", callback_data="bp_gen"))
    mk.add(types.InlineKeyboardButton("üìä Excel-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="bp_excel"))
    return mk

@bot.message_handler(commands=['business_pro','bp'])
def bp_cmd_menu(message):
    if message.chat.type != "private":
        bot.reply_to(message, "–û—Ç–∫—Ä–æ–π —ç—Ç–æ –º–µ–Ω—é –≤ –õ–° —Å–æ –º–Ω–æ–π.")
        return
    if not bp_require_active(message): return
    BP_STATE.pop(message.from_user.id, None)
    bot.send_message(
        message.chat.id,
        "üìÇ <b>Business Pro</b> ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ñ–æ—Ç–æ –∏ Excel.",
        reply_markup=bp_menu_markup(),
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda c: c.data in ["bp_doc","bp_photo","bp_gen","bp_excel"])
def bp_cb_menu(call):
    try: bot.answer_callback_query(call.id)
    except: pass
    fake = types.SimpleNamespace(chat=types.SimpleNamespace(id=call.message.chat.id), from_user=call.from_user)
    if call.message.chat.type != "private":
        bot.send_message(call.message.chat.id, "–û—Ç–∫—Ä–æ–π —ç—Ç–æ –º–µ–Ω—é –≤ –õ–° —Å–æ –º–Ω–æ–π.")
        return
    if not bp_is_active_business_pro(call.from_user.id):
        bot.send_message(call.message.chat.id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É <b>GPT-4o Business Pro</b>.", parse_mode="HTML"); return

    uid = call.from_user.id
    if call.data == "bp_doc":
        BP_STATE[uid] = {"mode":"doc_wait"}
        bot.send_message(call.message.chat.id, "üìÑ –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª: PDF/DOCX/TXT/RTF/ODT. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥.")
    elif call.data == "bp_photo":
        BP_STATE[uid] = {"mode":"photo_wait"}
        bot.send_message(call.message.chat.id, "üñº –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (jpg/png). –Ø —Å–¥–µ–ª–∞—é OCR –∏ —Ä–∞–∑–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")
    elif call.data == "bp_gen":
        # –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
        mk = types.InlineKeyboardMarkup()
        mk.add(types.InlineKeyboardButton("DOCX", callback_data="bp_gen_docx"),
               types.InlineKeyboardButton("PDF",  callback_data="bp_gen_pdf"))
        BP_STATE[uid] = {"mode":"gen_choose"}
        bot.send_message(call.message.chat.id, "üßæ –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", reply_markup=mk)
    elif call.data == "bp_excel":
        BP_STATE[uid] = {"mode":"excel_wait_file"}
        bot.send_message(call.message.chat.id,
                         "üìä –ü—Ä–∏—à–ª–∏ Excel (.xlsx) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞¬ª ‚Äî –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å).")

@bot.callback_query_handler(func=lambda c: c.data in ["bp_gen_docx","bp_gen_pdf"])
def bp_cb_gen_format(call):
    try: bot.answer_callback_query(call.id)
    except: pass
    if call.message.chat.type != "private":
        return
    if not bp_is_active_business_pro(call.from_user.id):
        bot.send_message(call.message.chat.id, "üîí –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É <b>GPT-4o Business Pro</b>.", parse_mode="HTML"); return
    fmt = "docx" if call.data.endswith("docx") else "pdf"
    BP_STATE[call.from_user.id] = {"mode":"gen_prompt", "format": fmt}
    bot.send_message(call.message.chat.id, "üßæ –û–ø–∏—à–∏, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Ç–∏–ª—å, —è–∑—ã–∫). –Ø —Å–æ–∑–¥–∞–º —Ñ–∞–π–ª.")

# --- –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
def _read_txt(path: Path) -> str:
    for enc in ("utf-8", "cp1251", "latin-1"):
        try:
            return path.read_text(encoding=enc)
        except Exception:
            continue
    return path.read_bytes().decode(errors="ignore")

def _read_docx(path: Path) -> str:
    if not docx: return ""
    d = docx.Document(str(path))
    parts = [p.text for p in d.paragraphs]
    # —Ç–∞–±–ª–∏—Ü—ã
    for t in d.tables:
        for row in t.rows:
            parts.append("\t".join(cell.text for cell in row.cells))
    return "\n".join(p for p in parts if p)

def _read_pdf(path: Path) -> str:
    if not fitz: return ""
    try:
        doc = fitz.open(str(path))
        text_chunks = []
        for page in doc:
            t = page.get_text().strip()
            if t:
                text_chunks.append(t)
        return "\n".join(text_chunks).strip()
    except Exception:
        return ""

def _pdf_ocr(path: Path) -> str:
    """OCR –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü PDF –≤ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç)."""
    if not (fitz and Image and pytesseract):
        return ""
    try:
        doc = fitz.open(str(path))
        parts = []
        for page in doc:
            pm = page.get_pixmap(dpi=220)
            img = Image.open(io.BytesIO(pm.tobytes()))
            txt = pytesseract.image_to_string(img, lang="rus+eng")
            if txt.strip():
                parts.append(txt)
        return "\n".join(parts).strip()
    except Exception:
        return ""

def _read_rtf(raw: str) -> str:
    # –æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—á–∏—Å—Ç–∫–∞ RTF (–¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ ‚Äî –ø–∞–Ω–¥–æ–∫/rtfparse)
    txt = re.sub(r"\\'[0-9a-fA-F]{2}", " ", raw)      # hex escapes
    txt = re.sub(r"\\[a-z]+-?\d*", " ", txt)          # –∫–æ–º–∞–Ω–¥—ã \b, \par, \fs24 –∏ —Ç.–ø.
    txt = re.sub(r"[{}]", " ", txt)                   # —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
    txt = re.sub(r"\s+", " ", txt)
    return txt.strip()

def _read_odt(path: Path) -> str:
    # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –≤—ã–¥—ë—Ä–≥–∏–≤–∞–Ω–∏–µ content.xml
    try:
        with zipfile.ZipFile(str(path), 'r') as z:
            with z.open("content.xml") as f:
                xml = f.read().decode("utf-8", errors="ignore")
        # –≥—Ä—É–±—ã–π —Ç–µ–∫—Å—Ç –∏–∑ XML
        xml = re.sub(r"<text:line-break\s*/?>", "\n", xml)
        xml = re.sub(r"<[^>]+>", " ", xml)
        xml = re.sub(r"\s+", " ", xml)
        return xml.strip()
    except Exception:
        return ""

def bp_extract_text(file_path: Path, mime: str|None, ext: str) -> str:
    ext = ext.lower().lstrip(".")
    try:
        if ext == "pdf":
            t = _read_pdf(file_path)
            if not t:
                t = _pdf_ocr(file_path)
            return t
        if ext == "docx" and docx:
            return _read_docx(file_path)
        if ext == "txt":
            return _read_txt(file_path)
        if ext == "rtf":
            raw = _read_txt(file_path)
            return _read_rtf(raw)
        if ext == "odt":
            return _read_odt(file_path)
    except Exception as e:
        print(f"[BP] extract error: {e}")
    return ""

def bp_analyze_text_with_gpt(text: str, filename: str) -> str:
    text_short = text[:15000]  # –∑–∞—â–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    prompt = (
        "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É:\n"
        "1) –°—É—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ (2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n"
        "2) –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã (—Å–ø–∏—Å–∫–æ–º).\n"
        "3) –†–∏—Å–∫–∏/–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.\n"
        "4) –ò—Ç–æ–≥/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        f"–ò–º—è —Ñ–∞–π–ª–∞: {filename}\n–¢–µ–∫—Å—Ç:\n{text_short}"
    )
    return _bp_chat([
        {"role":"system","content":"–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, —á—ë—Ç–∫–æ, –±–µ–∑ –≤–æ–¥—ã."},
        {"role":"user","content":prompt}
    ], model=_OAI_MODELS["business_pro"])

def _save_tele_file(file_id: str, prefer_ext: str|None=None) -> Path:
    f = bot.get_file(file_id)
    b = bot.download_file(f.file_path)
    ext = os.path.splitext(f.file_path)[1] or (prefer_ext or "")
    name = f"bp_{int(datetime.now().timestamp())}_{file_id.replace('/','_')}{ext}"
    path = BP_DIR / name
    with open(path, "wb") as out:
        out.write(b)
    return path

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
@bot.message_handler(content_types=['document'])
def bp_on_document(message):
    if message.chat.type != "private": 
        return
    uid = message.from_user.id
    state = BP_STATE.get(uid, {})
    if state.get("mode") not in ("doc_wait","excel_wait_file"):
        return  # –Ω–µ –Ω–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π

    if not bp_require_active(message): 
        return

    doc = message.document
    file_path = _save_tele_file(doc.file_id)
    ext = (doc.file_name or "").split(".")[-1].lower() if doc.file_name else file_path.suffix.lstrip(".")
    mime = doc.mime_type or ""

    # Excel-–≤–µ—Ç–∫–∞
    if state.get("mode") == "excel_wait_file":
        if ext != "xlsx" or not openpyxl:
            bot.reply_to(message, "–ù—É–∂–µ–Ω .xlsx (–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω openpyxl). –ü—Ä–∏—à–ª–∏ Excel –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞¬ª.")
            return
        BP_STATE[uid] = {"mode":"excel_wait_instr", "xlsx_path": str(file_path)}
        bot.reply_to(message, "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–µ–π.")
        return

    # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    bot.send_chat_action(message.chat.id, "typing")
    text = bp_extract_text(file_path, mime, ext)
    if not text:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç (–Ω—É–∂–Ω—ã PyMuPDF/python-docx/pytesseract).")
        return
    try:
        analysis = bp_analyze_text_with_gpt(text, doc.file_name or file_path.name)
        bot.send_message(message.chat.id, f"‚úÖ –†–∞–∑–±–æ—Ä —Ñ–∞–π–ª–∞ <b>{doc.file_name or file_path.name}</b>:\n\n{analysis}", parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ: OCR + Vision ---
@bot.message_handler(content_types=['photo'])
def bp_on_photo(message):
    if message.chat.type != "private": 
        return
    uid = message.from_user.id
    state = BP_STATE.get(uid, {})
    if state.get("mode") != "photo_wait":
        return
    if not bp_require_active(message):
        return

    if Image is None:
        bot.reply_to(message, "–ù—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Pillow (PIL).")
        return

    ph = message.photo[-1]  # –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    img_path = _save_tele_file(ph.file_id, prefer_ext=".jpg")

    # OCR
    ocr_text = ""
    if pytesseract:
        try:
            img = Image.open(str(img_path))
            ocr_text = pytesseract.image_to_string(img, lang="rus+eng").strip()
        except Exception as e:
            print(f"[BP] OCR error: {e}")

    # Vision (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π SDK)
    vision_note = ""
    gpt_desc = ""
    if _bp_chat_vision is not None:
        try:
            with open(str(img_path), "rb") as f:
                b64 = base64.b64encode(f.read()).decode("utf-8")
            messages = [{
                "role":"user",
                "content":[
                    {"type":"text","text":"–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç/—Å–∫—Ä–∏–Ω ‚Äî –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–º—ã—Å–ª)."},
                    {"type":"input_image","image_url": f"data:image/jpeg;base64,{b64}"}
                ]
            }]
            gpt_desc = _bp_chat_vision(messages, model=_OAI_MODELS["business_pro"])
        except Exception as e:
            vision_note = f"\n(vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e})"

    result_parts = []
    if gpt_desc:
        result_parts.append("üñº <b>–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä</b>:\n" + gpt_desc)
    if ocr_text:
        # –°–∂–∏–º–∞–µ–º OCR —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º GPT
        try:
            comment = _bp_chat([
                {"role":"system","content":"–ö—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–∏—Ä—É–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏."},
                {"role":"user","content": f"–¢–µ–∫—Å—Ç –∏–∑ OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{ocr_text[:8000]}"}
            ], model=_OAI_MODELS["business_pro"])
        except Exception as e:
            comment = f"(–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OCR: {e})"
        result_parts.append("üîé <b>OCR-—Ç–µ–∫—Å—Ç (—Å–∂–∞—Ç–æ)</b>:\n" + comment)

    if not result_parts:
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.{vision_note}")
    else:
        bot.send_message(message.chat.id, "\n\n".join(result_parts), parse_mode="HTML")

# --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ DOCX/PDF ---
def bp_generate_docx(text: str, out_path: Path):
    if not docx:
        raise RuntimeError("python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    d = docx.Document()
    for para in text.split("\n"):
        d.add_paragraph(para)
    d.save(str(out_path))

def bp_generate_pdf(text: str, out_path: Path):
    if not rl_canvas:
        raise RuntimeError("reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    c = rl_canvas.Canvas(str(out_path), pagesize=A4)
    width, height = A4
    x, y = 40, height - 40
    for line in text.split("\n"):
        if y < 60:
            c.showPage(); y = height - 40
        c.drawString(x, y, line[:120])
        y -= 16
    c.save()

@bot.message_handler(func=lambda m: BP_STATE.get(m.from_user.id,{}).get("mode")=="gen_prompt", content_types=['text'])
def bp_on_gen_prompt(message):
    if not bp_require_active(message): return
    uid = message.from_user.id
    fmt = BP_STATE[uid].get("format","docx")
    bot.send_chat_action(message.chat.id, "typing")

    # –ø—Ä–æ—Å–∏–º GPT —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–î–æ–±–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã, –±–µ–∑ –≤–æ–¥—ã."
    )
    try:
        content = _bp_chat([
            {"role":"system","content":"–¢—ã ‚Äî —Å–∏–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —Ç–µ—Ö—Ä–∞–π—Ç–µ—Ä. –î–µ–ª–∞–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç."},
            {"role":"user","content": prompt + "\n–ó–∞–ø—Ä–æ—Å:\n" + message.text}
        ], model=_OAI_MODELS["business_pro"])
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return

    ts = int(datetime.now().timestamp())
    out = BP_DIR / f"bp_doc_{ts}.{fmt}"
    try:
        if fmt == "docx":
            bp_generate_docx(content, out)
        else:
            bp_generate_pdf(content, out)
        bot.send_document(message.chat.id, open(out, "rb"), visible_file_name=out.name,
                          caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: {out.name}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
    finally:
        BP_STATE.pop(uid, None)

# --- Excel-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ---
def bp_excel_parse_plan(nl_text: str) -> dict:
    """
    –ü—Ä–æ—Å–∏–º GPT –≤—ã–¥–∞—Ç—å JSON-–ø–ª–∞–Ω (—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏):
      - add_sheet: {"name": str}
      - set_cell: {"sheet":str,"cell":str,"value":str}
      - sum_column: {"sheet":str,"column":str,"to_cell":str}
      - write_table: {"sheet":str,"start_cell":str,"headers":[...], "rows":[[...],...]}
    """
    plan_raw = _bp_chat([
        {"role":"system","content":"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Excel –≤ JSON-–ø–ª–∞–Ω —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞."},
        {"role":"user","content": (
            "–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: add_sheet, set_cell, sum_column, write_table.\n"
            "–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ JSON: {\"ops\":[{\"op\":\"add_sheet\",\"name\":\"–õ–∏—Å—Ç1\"}, ...]}.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n" + nl_text
        )}
    ], model=_OAI_MODELS["business_pro"])
    try:
        m = re.search(r"\{.*\}", plan_raw, flags=re.S)
        data = json.loads(m.group(0) if m else plan_raw)
        if not isinstance(data, dict) or "ops" not in data:
            raise ValueError("bad plan")
        return data
    except Exception:
        return {"ops":[]}

def bp_excel_apply_plan(xlsx_path: Path|None, plan: dict) -> Path:
    if not openpyxl:
        raise RuntimeError("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    if xlsx_path and Path(xlsx_path).exists():
        wb = openpyxl.load_workbook(str(xlsx_path))
    else:
        wb = openpyxl.Workbook()

    def get_ws(name: str):
        return wb[name] if name in wb.sheetnames else wb.create_sheet(title=name)

    for op in plan.get("ops", []):
        try:
            if op.get("op") == "add_sheet":
                nm = op.get("name","–õ–∏—Å—Ç1")[:31]
                if nm not in wb.sheetnames:
                    wb.create_sheet(title=nm)
            elif op.get("op") == "set_cell":
                ws = get_ws(op.get("sheet","–õ–∏—Å—Ç1"))
                ws[op.get("cell","A1")].value = op.get("value","")
            elif op.get("op") == "sum_column":
                ws = get_ws(op.get("sheet","–õ–∏—Å—Ç1"))
                col = op.get("column","A").upper()
                to_cell = op.get("to_cell","A100")
                # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                last = 1
                for r in range(1, ws.max_row+1):
                    if ws[f"{col}{r}"].value not in (None,""):
                        last = r
                ws[to_cell] = f"=SUM({col}1:{col}{last})"
            elif op.get("op") == "write_table":
                ws = get_ws(op.get("sheet","–õ–∏—Å—Ç1"))
                start = op.get("start_cell","A1")
                m = re.match(r"([A-Z]+)(\d+)", start)
                if not m: 
                    continue
                c0, r0 = m.group(1), int(m.group(2))
                headers = op.get("headers",[])
                rows = op.get("rows",[])
                # –∑–∞–≥–æ–ª–æ–≤–∫–∏
                for i, h in enumerate(headers, start=0):
                    col_letter = get_column_letter(openpyxl.utils.column_index_from_string(c0) + i)
                    ws[f"{col_letter}{r0}"] = h
                # –¥–∞–Ω–Ω—ã–µ
                for j, row in enumerate(rows, start=1):
                    for i, v in enumerate(row, start=0):
                        col_letter = get_column_letter(openpyxl.utils.column_index_from_string(c0) + i)
                        ws[f"{col_letter}{r0+j}"] = v
        except Exception as e:
            print(f"[BP] excel op error: {e}")

    out = BP_DIR / f"bp_excel_{int(datetime.now().timestamp())}.xlsx"
    # —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
    if "Sheet" in wb.sheetnames and len(wb.sheetnames) > 1:
        try: 
            ws = wb["Sheet"]; wb.remove(ws)
        except Exception: 
            pass
    wb.save(str(out))
    return out

@bot.message_handler(func=lambda m: BP_STATE.get(m.from_user.id,{}).get("mode")=="excel_wait_file", content_types=['text'])
def bp_excel_text_new_or_wait(message):
    if message.chat.type != "private": return
    if not bp_require_active(message): return
    txt = (message.text or "").strip().lower()
    if "–Ω–æ–≤–∞—è" in txt:
        # –±–µ–∑ —Ñ–∞–π–ª–∞ ‚Äî –∂–¥—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        BP_STATE[message.from_user.id] = {"mode":"excel_wait_instr", "xlsx_path": None}
        bot.reply_to(message, "–û–∫. –ü—Ä–∏—à–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é ‚Äî —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    else:
        bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ .xlsx –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞¬ª.")

@bot.message_handler(func=lambda m: BP_STATE.get(m.from_user.id,{}).get("mode")=="excel_wait_instr", content_types=['text'])
def bp_excel_on_instruction(message):
    if not bp_require_active(message): return
    st = BP_STATE.get(message.from_user.id,{})
    xlsx_path = st.get("xlsx_path")
    bot.send_chat_action(message.chat.id, "typing")
    try:
        plan = bp_excel_parse_plan(message.text)
        out = bp_excel_apply_plan(Path(xlsx_path) if xlsx_path else None, plan)
        bot.send_document(message.chat.id, open(out,"rb"), visible_file_name=out.name, caption="‚úÖ –ì–æ—Ç–æ–≤–æ")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel: {e}")
    finally:
        BP_STATE.pop(message.from_user.id, None)

# --- YooKassa webhook: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Business Pro (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
# –ï—Å–ª–∏ –≤ metadata –ø–ª–∞—Ç–µ–∂–∞ –µ—Å—Ç—å {"tariff":"business_pro","bp_user_id": "<–∏–¥>","days":"30"},
# —ç—Ç–æ—Ç –±–ª–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
from flask import request
try:
    @app.route("/yookassa-webhook-business-pro", methods=["POST"])
    def yk_bp_webhook():
        try:
            payload = request.get_json(force=True) or {}
            if payload.get("event") != "payment.succeeded":
                return "", 200
            obj  = payload.get("object", {}) or {}
            meta = obj.get("metadata", {}) or {}

            if str(meta.get("tariff")) != "business_pro":
                return "", 200

            uid_raw = str(meta.get("bp_user_id") or "").strip()
            days_raw = str(meta.get("days") or "30").strip()
            uid = int(uid_raw) if uid_raw.isdigit() else None
            days = int(days_raw) if days_raw.isdigit() else 30
            if not uid:
                return "", 200

            exp = bp_set_tariff(uid, "business_pro", days)
            try:
                bot.send_message(uid, f"‚úÖ –¢–∞—Ä–∏—Ñ <b>GPT-4o Business Pro</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø –¥–æ {exp.strftime('%d.%m.%Y %H:%M')} UTC.\n–ö–æ–º–∞–Ω–¥–∞: /bp", parse_mode="HTML")
            except Exception as e:
                print(f"[BP] notify user err: {e}")
        except Exception as e:
            print(f"[BP] yk webhook err: {e}")
        return "", 200
except Exception as e:
    print(f"[BP] webhook route skip: {e}")


@bot.message_handler(func=lambda msg: msg.text == "üí° –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
def handle_change_style(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for mode in available_modes:
        markup.add(mode.capitalize())
    markup.add("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üìò –ü—Ä–∞–≤–∏–ª–∞")
def handle_rules(message):
    rules_text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ Neiro Max:</b>\n\n"
        "‚úÖ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 24 —á–∞—Å–∞ –∏–ª–∏ 10 000 —Ç–æ–∫–µ–Ω–æ–≤ (—á—Ç–æ –Ω–∞—Å—Ç—É–ø–∏—Ç —Ä–∞–Ω—å—à–µ).\n\n"
        "‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§;\n"
        "‚Ä¢ –¢–µ–º—ã: –Ω–∞—Å–∏–ª–∏–µ, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º, —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ GPT-—á–∞—Ç –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏.\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Neiro Max!"
    )
    bot.send_message(message.chat.id, rules_text, parse_mode="HTML")


@bot.message_handler(func=lambda msg: any(phrase in msg.text.lower() for phrase in [
    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ—ë –∏–º—è", "—Ç—ã –∫—Ç–æ", "–∫–∞–∫ –∑–≤–∞—Ç—å", "–Ω–∞–∑—ã–≤–∞–µ—à—å—Å—è", "–Ω–∞–∑–æ–≤–∏ —Å–µ–±—è"
]))

def handle_bot_name(message):
    bot.send_message(message.chat.id, f"–Ø ‚Äî {BOT_NAME}, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üòâ")



@bot.message_handler(func=lambda msg: msg.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(message.chat.id))



@bot.message_handler(func=lambda msg: msg.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
def handle_launch_neiro_max(message):
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu(message.chat.id))
@bot.message_handler(func=lambda msg: msg.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def handle_support(message):
    bot.send_message(
        message.chat.id,
        "üõ† <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n\n"
        "Telegram: @neiro_max\n"
        "Email: support@neiro-max.ai",
        parse_mode="HTML"
    )




@bot.message_handler(func=lambda msg: msg.text.lower() in [m.lower() for m in available_modes])
def handle_style_selection(message):
    chat_id = str(message.chat.id)
    selected = message.text.lower()
    user_modes[chat_id] = selected
    bot.send_message(chat_id, f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{selected.capitalize()}</b>", parse_mode="HTML")
@bot.message_handler(func=lambda msg: msg.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Neiro Max")
def handle_launch(message):
    chat_id = str(message.chat.id)

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    user_modes[message.chat.id] = "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
    user_histories[message.chat.id] = []
    user_models[message.chat.id] = "gpt-3.5-turbo"
    user_token_limits[message.chat.id] = 0

    bot.send_message(
        message.chat.id,
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòâ",
        reply_markup=main_menu(chat_id)
    )



@bot.message_handler(func=lambda msg: True)
def handle_prompt(message):
    chat_id = str(message.chat.id)

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–∞—Ä–∏—Ñ/–ø—Ä–æ–±–Ω–∏–∫)
    if not check_access_and_notify(chat_id):
        return

    # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç –ø—Ä–æ–±–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if chat_id not in trial_start_times:
        trial_start_times[chat_id] = time.time()




    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏
    tokens_used = user_token_limits.get(chat_id, 0)
    time_elapsed = time.time() - trial_start_times[chat_id]
    if time_elapsed > TRIAL_DURATION_SECONDS or tokens_used >= TRIAL_TOKEN_LIMIT:
    # ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–∏–∫–∞ + –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        return_url = "https://t.me/NeiroMaxBot"
        buttons = []
        tariffs = [
            ("GPT-3.5: Lite ‚Äî 199‚ÇΩ", 199, "GPT-3.5 Lite"),
            ("GPT-3.5: Pro ‚Äî 299‚ÇΩ", 299, "GPT-3.5 Pro"),
            ("GPT-3.5: Max ‚Äî 399‚ÇΩ", 399, "GPT-3.5 Max"),
            ("GPT-4o: Lite ‚Äî 299‚ÇΩ", 299, "GPT-4o Lite"),
            ("GPT-4o: Pro ‚Äî 499‚ÇΩ", 499, "GPT-4o Pro"),
            ("GPT-4o: Max ‚Äî 999‚ÇΩ", 999, "GPT-4o Max")
        ]
        for label, price, desc in tariffs:
            url = create_payment(price, desc, return_url, chat_id)
            if url:
                buttons.append(types.InlineKeyboardButton(f"üí≥ {label}", url=url))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for btn in buttons:
            markup.add(btn)
        bot.send_message(
            chat_id,
            "‚õî –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=markup
        )
        return
    prompt = message.text.strip()
    mode = user_modes.get(chat_id, "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä")
    model = user_models.get(chat_id, "gpt-3.5-turbo")

    # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∏–ª—é
    forbidden = {
        "–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä": ["–ø—Å–∏—Ö–æ–ª–æ–≥", "–¥–µ–ø—Ä–µ—Å—Å", "–ø–æ–¥–¥–µ—Ä–∂", "—Ç—Ä–µ–≤–æ–∂"],
        "–¥–µ–ª–æ–≤–æ–π": ["—é–º–æ—Ä", "—à—É—Ç–∫", "–ø—Ä–∏–∫–æ–ª"],
        "–≥–æ–ø–Ω–∏–∫": ["–∞–∫–∞–¥–µ–º", "–Ω–∞—É—á–Ω", "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä"],
        "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä": ["—à—É—Ç–∫", "–≥–æ–ø–Ω–∏–∫", "–∂–∏–∑–∞"]
    }
    if any(word in prompt.lower() for word in forbidden.get(mode, [])):
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: <b>{mode.capitalize()}</b>.\n–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é.\n–°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üí°", parse_mode="HTML")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    history = load_history(chat_id)
    messages = [{"role": "system", "content": available_modes[mode]}] + history + [{"role": "user", "content": prompt}]

    try:
        response = openai.ChatCompletion.create(model=model, messages=messages)
        reply = response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏—é
    user_token_limits[chat_id] = tokens_used + len(prompt)
    history.append({"role": "user", "content": prompt})
    history.append({"role": "assistant", "content": reply})
    save_history(chat_id, history)

    bot.send_message(chat_id, reply, reply_markup=format_buttons())

@bot.callback_query_handler(func=lambda call: call.data in ["save_pdf", "save_word"])
def handle_file_format(call):
    chat_id = call.message.chat.id
    history = load_history(str(chat_id))
    text = "\n".join(m["content"] for m in history if m["role"] != "system")
    if call.data == "save_pdf":
        pdf_bytes = BytesIO()
        pdf = canvas.Canvas(pdf_bytes)
        y = 800
        for line in text.split("\n"):
            pdf.drawString(40, y, line)
            y -= 15
        pdf.save()
        pdf_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.pdf", pdf_bytes))
    else:
        doc = Document()
        doc.add_paragraph(text)
        word_bytes = BytesIO()
        doc.save(word_bytes)
        word_bytes.seek(0)
        bot.send_document(chat_id, ("neiro_max_output.docx", word_bytes))

print("ü§ñ Neiro Max –∑–∞–ø—É—â–µ–Ω.")
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "!", 200
    else:
        return "Invalid content type", 403

@app.route("/yookassa/webhook", methods=["POST"])
def yookassa_webhook():
    data = request.json
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if data.get("object", {}).get("status") == "succeeded":
        description = data.get("object", {}).get("description", "")
        payment_id = data.get("object", {}).get("id")

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        try:
            parts = description.split(":")
            chat_id = int(parts[1])
            tariff = parts[2]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            if "gpt-4" in tariff.lower():
                user_models[str(chat_id)] = "gpt-4o"
            else:
                user_models[str(chat_id)] = "gpt-3.5-turbo"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –¥–Ω–µ–π)
            now = int(time.time())
            subscriptions_file = "subscriptions.json"
            if os.path.exists(subscriptions_file):
                with open(subscriptions_file, "r", encoding="utf-8") as f:
                    subscriptions = json.load(f)
            else:
                subscriptions = {}

            subscriptions[str(chat_id)] = {
                "model": user_models[str(chat_id)],
                "activated_at": now,
                "expires_at": now + 30 * 24 * 60 * 60,
                "token_limit": 100000,
                "warned": False
            }

            with open(subscriptions_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, ensure_ascii=False, indent=2)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: *{tariff}*", parse_mode="Markdown")

        except Exception as e:
            print(f"[webhook error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")

    if data.get('event') == 'payment.succeeded':
        obj = data['object']
        description = obj.get("description", "")
        metadata = obj.get("metadata", {})
        chat_id = metadata.get("chat_id")

        if not chat_id:
            return jsonify({"status": "chat_id missing"})

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
        if "GPT-3.5" in description:
            model = "gpt-3.5-turbo"
        elif "GPT-4" in description:
            model = "gpt-4o"
        else:
            return jsonify({"status": "unknown model"})

        # üîê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if chat_id in user_models:
            print(f"[Webhook] –ú–æ–¥–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è chat_id={chat_id}")
            return jsonify({"status": "already activated"})

        # ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        user_models[chat_id] = model
                # üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        token_limits = {
            "GPT-3.5 Lite": 50000,
            "GPT-3.5 Pro": 100000,
            "GPT-3.5 Max": 1000000,
            "GPT-4o Lite": 30000,
            "GPT-4o Pro": 60000,
            "GPT-4o Max": 1000000
        }
        token_limit = token_limits.get(description, 100000)

        # üóìÔ∏è –ó–∞–ø–∏—Å—å —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ (30 –¥–Ω–µ–π)
        subscription_file = "subscriptions.json"
        try:
            if os.path.exists(subscription_file):
                with open(subscription_file, "r", encoding="utf-8") as f:
                    subscriptions = json.load(f)
            else:
                subscriptions = {}

            expires_at = int(time.time()) + 30 * 86400  # 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
            subscriptions[str(chat_id)] = {
                "expires_at": expires_at,
                "warned": False,
                "token_limit": token_limit
            }

            with open(subscription_file, "w", encoding="utf-8") as f:
                json.dump(subscriptions, f, indent=2)

            print(f"[YooKassa] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {chat_id} –¥–æ {expires_at}")
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")

        bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: <b>{description}</b>", parse_mode="HTML")
        return jsonify({"status": "ok"})

    return jsonify({"status": "ignored"})


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
